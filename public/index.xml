<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hobo&#39;s Blog - 技术实践</title>
    <link>http://hbchen.com/</link>
    <description>Recent content on Hobo&#39;s Blog - 技术实践</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>HB Studio</copyright>
    <lastBuildDate>Sun, 20 Aug 2017 21:38:52 +0800</lastBuildDate>
    
        <atom:link href="http://hbchen.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://hbchen.com/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>http://hbchen.com/about/</guid>
      
        <description>

&lt;h2 id=&#34;hobo-s-blog&#34;&gt;Hobo&amp;rsquo;s Blog!&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;微信&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://hbchen.com/img/wechat.jpg&#34; alt=&#34;微信&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;github-https-github-com-hb-chen&#34;&gt;&lt;a href=&#34;https://github.com/hb-chen&#34;&gt;GitHub&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hb-go/echo-web&#34;&gt;Echo 实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hb-go/micro&#34;&gt;go-micro实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hb-go/micro-mesh&#34;&gt;Istio微服务架构实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>【Istio安全】服务间访问控制-RBAC</title>
      <link>http://hbchen.com/post/servicemesh/2019-03-09-istio-rbac-quick-start/</link>
      <pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://hbchen.com/post/servicemesh/2019-03-09-istio-rbac-quick-start/</guid>
      
        <description>&lt;p&gt;Istio提供了非常易用的安全解决方案，包括服务间身份验证&lt;code&gt;mTLS&lt;/code&gt;，服务间访问控制&lt;code&gt;RBAC&lt;/code&gt;，以及终端用户身份验证&lt;code&gt;JWT&lt;/code&gt;等，本文主要介绍如何使用服务间访问控制，同时涉及&lt;code&gt;双向TLS&lt;/code&gt;。&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Istio版本 &lt;strong&gt;1.1.0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在的&lt;a href=&#34;https://github.com/hb-go/micro-mesh&#34;&gt;github.com/hb-go/micro-mesh&lt;/a&gt;中有结合示例的&lt;a href=&#34;https://github.com/hb-go/micro-mesh/tree/master/deploy/k8s/rbac&#34;&gt;RBAC配置实践&lt;/a&gt;可以参考&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;要实现&lt;code&gt;RBAC&lt;/code&gt;主要理解以下几个类型的&lt;code&gt;yaml&lt;/code&gt;配置，以及之间的关系：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#双向tls&#34;&gt;双向TLS&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Policy&lt;/code&gt;或&lt;code&gt;MeshPolicy&lt;/code&gt;，上游&lt;code&gt;server&lt;/code&gt;开启TLS&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DestinationRule&lt;/code&gt;，下游&lt;code&gt;client&lt;/code&gt;开启TLS&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rbac&#34;&gt;RBAC&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ClusterRbacConfig&lt;/code&gt;/&lt;code&gt;RbacConfig&lt;/code&gt;，启用授权及范围&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ServiceRole&lt;/code&gt;，角色权限规则&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ServiceRoleBinding&lt;/code&gt;，角色绑定规则&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#optional&#34;&gt;Optional&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ServiceAccount&lt;/code&gt;，&lt;code&gt;ServiceRoleBinding&lt;/code&gt;.&lt;code&gt;subjects&lt;/code&gt;的&lt;code&gt;user&lt;/code&gt;条件
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;假设场景&#34;&gt;假设场景&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;网格内&lt;code&gt;service-1&lt;/code&gt;、&lt;code&gt;service-2&lt;/code&gt;开启RBAC访问控制&lt;/li&gt;
&lt;li&gt;仅&lt;code&gt;service-1&lt;/code&gt;授权给&lt;code&gt;ingressgateway&lt;/code&gt;访问，&lt;code&gt;service-2&lt;/code&gt;则不能被&lt;code&gt;ingressgateway&lt;/code&gt;访问&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hb-chen/hbchen.com/master/static/img/istio-tls-rbac.png&#34; alt=&#34;auth-adapter&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;双向tls&#34;&gt;双向TLS&lt;/h2&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/zh/docs/concepts/security/#%E8%AE%A4%E8%AF%81&#34;&gt;Istio文档-认证策略&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/zh/docs/concepts/security/#%E8%AE%A4%E8%AF%81%E7%AD%96%E7%95%A5&#34;&gt;认证策略&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/zh/docs/tasks/security/authn-policy/&#34;&gt;Istio文档-基础认证策略&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/zh/docs/tasks/security/authn-policy/#%E4%B8%BA%E7%BD%91%E6%A0%BC%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E6%9C%8D%E5%8A%A1%E5%90%AF%E7%94%A8%E5%8F%8C%E5%90%91-tls-%E8%AE%A4%E8%AF%81&#34;&gt;为网格中的所有服务启用双向 TLS 认证&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;1-上游-server-开启tls&#34;&gt;1.上游&lt;code&gt;server&lt;/code&gt;开启TLS&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&#34;##&#34;&gt;策略范围说明&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网格范围策略&lt;/strong&gt;：在网格范围存储中定义的策略，没有目标选择器部分。网格中最多只能有&lt;strong&gt;一个网格范围&lt;/strong&gt;的策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命名空间范围的策略&lt;/strong&gt;：在命名空间范围存储中定义的策略，名称为 default 且没有目标选择器部分。每个命名空间最多只能有&lt;strong&gt;一个命名空间范围&lt;/strong&gt;的策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特定于服务的策略&lt;/strong&gt;：在命名空间范围存储中定义的策略，具有非空目标选择器部分。命名空间可以具有&lt;strong&gt;零个，一个或多个特定于服务&lt;/strong&gt;的策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;策略范围可以分别由&lt;code&gt;Policy&lt;/code&gt;、&lt;code&gt;MeshPolicy&lt;/code&gt;设置，&lt;code&gt;Policy&lt;/code&gt;可以选择对&lt;strong&gt;命名空间&lt;/strong&gt;所有服务生效，也可以指定&lt;code&gt;targets&lt;/code&gt;对&lt;strong&gt;特定服务&lt;/strong&gt;生效，&lt;code&gt;MeshPolicy&lt;/code&gt;则是整个网格内生效，对于&lt;strong&gt;命名空间范围&lt;/strong&gt;和&lt;strong&gt;网格范围&lt;/strong&gt;名称都只能为&lt;code&gt;default&lt;/code&gt;。&lt;/br&gt;
同时配置多个策略时使用最窄匹配策略，&lt;strong&gt;特定服务&amp;gt;命名空间范围&amp;gt;网格范围&lt;/strong&gt;，如果多个&lt;strong&gt;特定于服务的策略&lt;/strong&gt;与服务匹配，则随机选择一个。下面是不同策略范围的具体配置参考：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Policy&lt;/code&gt;特定于服务的策略&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;targets&lt;/code&gt;支持&lt;code&gt;name&lt;/code&gt;以及&lt;code&gt;ports&lt;/code&gt;列表&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: &amp;quot;authentication.istio.io/v1alpha1&amp;quot;
kind: &amp;quot;Policy&amp;quot;
metadata:
  name: &amp;quot;policy-name&amp;quot;
spec:
  targets:
  - name: service-name-1
  - name: service-name-2
    ports:
    - number: 8080
  peers:
  - mtls: {}
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Policy&lt;/code&gt;命名空间范围的策略&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: &amp;quot;authentication.istio.io/v1alpha1&amp;quot;
kind: &amp;quot;Policy&amp;quot;
metadata:
  name: &amp;quot;default&amp;quot;
  namespace: &amp;quot;namespace-1&amp;quot;
spec:
  peers:
  - mtls: {}
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;MeshPolicy&lt;/code&gt;网格范围策略&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: &amp;quot;authentication.istio.io/v1alpha1&amp;quot;
kind: &amp;quot;MeshPolicy&amp;quot;
metadata:
  name: &amp;quot;default&amp;quot;
spec:
  peers:
  - mtls: {}
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-下游-client-开启tls&#34;&gt;2.下游&lt;code&gt;client&lt;/code&gt;开启TLS&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;client&lt;/code&gt;端TLS由目标规则&lt;code&gt;DestinationRule&lt;/code&gt;配置，在流量策略&lt;code&gt;trafficPolicy&lt;/code&gt;中开启&lt;code&gt;tls&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/zh/docs/reference/config/istio.networking.v1alpha3/#destinationrule&#34;&gt;Istio参考配置-通信路由#DestinationRule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/zh/docs/reference/config/istio.networking.v1alpha3/#trafficpolicy&#34;&gt;Istio参考配置-通信路由#TrafficPolicy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: service-name-1
spec:
  host: service-host-1
  # NOTE: 开启TLS
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
  subsets:
  - name: v1
    labels:
      version: v1
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;TLS&lt;code&gt;mode&lt;/code&gt;说明&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;mode值&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;DISABLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要为上游端点使用 TLS。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;SIMPLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;向上游端点发起 TLS 连接。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;MUTUAL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;发送客户端证书进行验证，用双向 TLS 连接上游端点。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ISTIO_MUTUAL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;发送客户端证书进行验证，用双向 TLS 连接上游端点。和 MUTUAL 相比，这种方式使用的双向 TLS 证书系统是由 Istio 生成的。如果使用这种模式，TLSSettings 中的其他字段应该留空。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;rbac&#34;&gt;RBAC&lt;/h2&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/zh/docs/concepts/security/#%E6%8E%88%E6%9D%83&#34;&gt;Istio文档-授权&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/zh/docs/concepts/security/#%E5%90%AF%E7%94%A8%E6%8E%88%E6%9D%83&#34;&gt;启用授权&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/zh/docs/concepts/security/#%E6%8E%88%E6%9D%83%E7%AD%96%E7%95%A5&#34;&gt;授权策略&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/zh/docs/tasks/security/role-based-access-control/&#34;&gt;Istio文档-基于角色的访问控制&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/zh/docs/tasks/security/role-based-access-control/#%E6%9C%8D%E5%8A%A1%E7%BA%A7%E7%9A%84%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6&#34;&gt;服务级的访问控制&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/zh/docs/setup/kubernetes/upgrade/#%E8%BF%81%E7%A7%BB-rbacconfig-%E5%88%B0-clusterrbacconfig&#34;&gt;Istio文档-迁移 RbacConfig 到 ClusterRbacConfig&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;这里使用的&lt;code&gt;ClusterRbacConfig&lt;/code&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/zh/docs/reference/config/authorization/&#34;&gt;Istio参考配置-授权&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;有关&lt;code&gt;RbacConfig&lt;/code&gt;、&lt;code&gt;ServiceRole&lt;/code&gt;、&lt;code&gt;ServiceRoleBinding&lt;/code&gt;的属性结构Istio文档有详细的配置可以参考:&lt;a href=&#34;https://istio.io/zh/docs/reference/config/authorization/istio.rbac.v1alpha1/&#34;&gt;Istio参考配置-授权-RBAC&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-开启授权-clusterrbacconfig&#34;&gt;1.开启授权&lt;code&gt;ClusterRbacConfig&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: &amp;quot;rbac.istio.io/v1alpha1&amp;quot;
kind: ClusterRbacConfig
metadata:
  name: default
  namespace: istio-system
spec:
  mode: &#39;ON_WITH_INCLUSION&#39;
  inclusion:
    #namespaces: [&amp;quot;namespace-1&amp;quot;]
    services: [&amp;quot;service-name-1.namespace-1.svc.cluster.local&amp;quot;, &amp;quot;service-name-2.namespace-1.svc.cluster.local&amp;quot;]
  # NOTE: ENFORCED/PERMISSIVE，严格或宽容模式
  enforcement_mode: ENFORCED
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;enforcement_mode&lt;/code&gt;可以选择&lt;code&gt;ENFORCED&lt;/code&gt;严格模式，或&lt;code&gt;PERMISSIVE&lt;/code&gt;宽容模式，宽容模式便于授权策略需要&lt;strong&gt;变更时进行验证测试&lt;/strong&gt;，&lt;a href=&#34;https://istio.io/zh/docs/tasks/security/role-based-access-control/#%E6%8E%88%E6%9D%83%E8%AE%B8%E5%8F%AF%E6%A8%A1%E5%BC%8F&#34;&gt;Istio任务-授权许可模式&lt;/a&gt;任务中有更具体的场景介绍。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;模式&lt;code&gt;mode&lt;/code&gt;说明&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;mode值&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;OFF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;关闭 Istio RBAC，RbacConfig 的所有配置将会失效，且 Istio RBAC Policies 不会执行。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;为所有 services 和 namespaces 启用 Istio RBAC。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ON_WITH_INCLUSION&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;仅针对 inclusion 字段中指定的 services 和 namespaces 启用 Istio RBAC。其它不在 inclusion 字段中的 services 和 namespaces 将不会被 Istio RBAC Policies 强制执行。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ON_WITH_EXCLUSION&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;针对除了 exclusion 字段中指定的 services 和 namespaces，启用 Istio RBAC。其它不在 exclusion 字段中的 services 和 namespaces 将按照 Istio RBAC Policies 执行。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;2-角色权限规则-servicerole&#34;&gt;2.角色权限规则&lt;code&gt;ServiceRole&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;namespace&lt;/code&gt; + &lt;code&gt;services&lt;/code&gt; + &lt;code&gt;paths&lt;/code&gt; + &lt;code&gt;methods&lt;/code&gt; 一起定义了如何访问服务，其中&lt;code&gt;services&lt;/code&gt;必选，另外有&lt;code&gt;constraints&lt;/code&gt;可以指定其它约束，支持的约束参考&lt;a href=&#34;https://istio.io/zh/docs/reference/config/authorization/constraints-and-properties/#%E6%94%AF%E6%8C%81%E7%9A%84%E7%BA%A6%E6%9D%9F&#34;&gt;Istio参考配置-授权-约束和属性#支持的约束&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: &amp;quot;rbac.istio.io/v1alpha1&amp;quot;
kind: ServiceRole
metadata:
  name: service-role-1
  namespace: default
spec:
  rules:
  - services: [&amp;quot;service-name-1.namespace-1.svc.cluster.local&amp;quot;]
    methods: [&amp;quot;*&amp;quot;]
    # NOTE: 根据约束需要修改
    constraints:
    - key: request.headers[version]
      values: [&amp;quot;v1&amp;quot;, &amp;quot;v2&amp;quot;]
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-角色绑定规则-servicerolebinding&#34;&gt;3.角色绑定规则&lt;code&gt;ServiceRoleBinding&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;user&lt;/code&gt; + &lt;code&gt;properties&lt;/code&gt; 一起定义授权给谁，支持的属性参考&lt;a href=&#34;https://istio.io/zh/docs/reference/config/authorization/constraints-and-properties/#%E6%94%AF%E6%8C%81%E7%9A%84%E5%B1%9E%E6%80%A7&#34;&gt;Istio参考配置-授权-约束和属性#支持的属性&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: &amp;quot;rbac.istio.io/v1alpha1&amp;quot;
kind: ServiceRoleBinding
metadata:
  name: service-rb-1
  namespace: default
spec:
  subjects:
  # NOTE: 需要添加 ServiceAccount
  - user: &amp;quot;cluster.local/ns/namespace-1/sa/service-account-2&amp;quot;
    # NOTE: 根据属性需要修改
    properties:
      source.namespace: &amp;quot;default&amp;quot;
  # NOTE: ingressgateway授权
  - user: &amp;quot;cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account&amp;quot;
  roleRef:
    kind: ServiceRole
    name: &amp;quot;service-role-1&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;optional&#34;&gt;Optional&lt;/h2&gt;

&lt;h3 id=&#34;部署实例添加-serviceaccount&#34;&gt;部署实例添加&lt;code&gt;ServiceAccount&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;对于需要要在&lt;code&gt;ServiceRoleBinding&lt;/code&gt;的&lt;code&gt;subjects&lt;/code&gt;条件中授权的&lt;code&gt;user&lt;/code&gt;，需要在部署实例时指定&lt;code&gt;serviceAccountName&lt;/code&gt;，如前面&lt;code&gt;ServiceRoleBinding&lt;/code&gt;配置要允许&lt;code&gt;service-2&lt;/code&gt;访问&lt;code&gt;service-1&lt;/code&gt;，则部署&lt;code&gt;service-2&lt;/code&gt;时需要配置&lt;code&gt;serviceAccountName: service-account-2&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# NOTE: 创建ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: service-account-2
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: service-name-2-v1
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: service-name-2
        version: v1
    spec:
      # NOTE: 为部署实例指定serviceAccountName
      serviceAccountName: service-account-2
      containers:
      - name: service-name-2-v1
        command: [
          &amp;quot;/main&amp;quot;
        ]
        image: hbchen/service-2:v0.0.1
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9080
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;Istio服务网格可以很方便的实现&lt;strong&gt;服务间访问控制&lt;/strong&gt;，通过服务级的授权开关，再结合&lt;code&gt;ServiceRole&lt;/code&gt;、&lt;code&gt;ServiceRoleBinding&lt;/code&gt;的约束和属性条件，可以实现细粒度的访问控制。本文未涉及Istio的终端用户身份验证，后面会结合&lt;code&gt;Ingress&lt;/code&gt;、&lt;code&gt;Egress&lt;/code&gt;的&lt;code&gt;TLS&lt;/code&gt;和&lt;code&gt;JWT&lt;/code&gt;一起分析边缘流量相关的安全问题。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>【Istio源码】Mixer</title>
      <link>http://hbchen.com/post/servicemesh/2019-03-17-istio-code-mixer/</link>
      <pubDate>Sun, 17 Mar 2019 17:23:52 +0800</pubDate>
      
      <guid>http://hbchen.com/post/servicemesh/2019-03-17-istio-code-mixer/</guid>
      
        <description>&lt;p&gt;Mixer模块为Istio提供了模块化可扩展的组件，将策略与遥测进行抽象，通过配置模型进行配置。在&lt;a href=&#34;http://hbchen.com/post/2019-03-05-custom-istio-mixer-adapter/&#34;&gt;《【Istio】自定义 Mixer Adapter示例教程(附源码)》&lt;/a&gt;中介绍了如何自定义一个Adapter，本文通过&lt;code&gt;mxier&lt;/code&gt;的源码分析，进一步了解适配器如何工作。&lt;/p&gt;

&lt;p&gt;Istio部署中有两个服务与&lt;code&gt;mixer&lt;/code&gt;有关:&lt;code&gt;istio-policy&lt;/code&gt;、&lt;code&gt;istio-telemetry&lt;/code&gt;，分别负责策略与遥测，运行的都是&lt;code&gt;mixs&lt;/code&gt;；另外&lt;code&gt;mixer&lt;/code&gt;的Client端在Sidecar&lt;code&gt;istio-proxy&lt;/code&gt;，竟像是&lt;code&gt;pilot-agent&lt;/code&gt;，镜像中的&lt;code&gt;Envoy&lt;/code&gt;是&lt;code&gt;istio/proxy&lt;/code&gt;通过&lt;code&gt;Envoy&lt;/code&gt;的&lt;code&gt;filter&lt;/code&gt;扩展了&lt;code&gt;mixerclient&lt;/code&gt;、&lt;code&gt;jwt_auth&lt;/code&gt;、&lt;code&gt;authn&lt;/code&gt;等功能。&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;github.com/istio/istio &lt;strong&gt;release 1.1.0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;github.com/istio/proxy &lt;strong&gt;release 1.1.0&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;mixer模块-mixs-server-执行序列&#34;&gt;Mixer模块&lt;code&gt;mixs server&lt;/code&gt;执行序列&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;sequenceDiagram
    participant s as server
    participant a as api
    participant r as runtime
    participant rd as runtine/dispatcher
    participant rc as runtime/config
    participant cs as config/store
    
    s -&amp;gt;&amp;gt; r: runtime.New()
    r --&amp;gt;&amp;gt; s: rt *Runtime
    s -&amp;gt;&amp;gt; r: p.runtimeListen(rt) —&amp;gt; rt.StartListening()
    r -&amp;gt;&amp;gt; cs: store.StartWatch()
    loop 配置监控 
    cs -&amp;gt;&amp;gt; cs: go func() { watchChan&amp;lt;-Event }
    end
    cs --&amp;gt;&amp;gt; r: &amp;lt;-watchChan
    
    loop 配置更新
    r -&amp;gt;&amp;gt; rc: go func() { WatchChanges(watchChan) }
    alt &amp;lt;-watchChan
    Note over rd,rc: &amp;lt;-watchChan Event先做堆积
    cs -&amp;gt;&amp;gt; cs: append(events, event)
    
    else &amp;lt;-timeChan
    Note over rd,rc: &amp;lt;-timeChan 计时器更新配置
    cs -&amp;gt;&amp;gt; r: onConfigChange()
    r -&amp;gt;&amp;gt; rc: ephemeral.ApplyEvent(events)
    rc -&amp;gt;&amp;gt; rc: entries Lock()，更新entries
    r -&amp;gt;&amp;gt; r: processNewConfig()
    r -&amp;gt;&amp;gt; rc: ephemeral.BuildSnapshot()
    Note right of rc: 创建配置快照&amp;lt;br/&amp;gt;entries RLock()&amp;lt;br/&amp;gt;......&amp;lt;br/&amp;gt;e.processRuleConfigs
    rc -&amp;gt;&amp;gt; rc: processXXXConfigs()
    rc --&amp;gt;&amp;gt; r: nweSnapshot *Snapshot
    Note right of r: 获得newHandlers
    r -&amp;gt;&amp;gt; r: handler.NewTable(nweSnapshot)
    Note right of r: 获得newRoutes
    r -&amp;gt;&amp;gt; r: routing.BuildTable(newHandlers, nweSnapshot)
    Note right of r: 更新RoutingContext
    r -&amp;gt;&amp;gt; rd: dispatcher.ChangeRoute(newRoutes)
    
    else &amp;lt;-stop
    Note over rd,rc: &amp;lt;-stop 退出goroutine
    cs --&amp;gt;&amp;gt; r: return
    end
    end
    
    r --&amp;gt;&amp;gt; s: nil or error
    s -&amp;gt;&amp;gt; a: api.NewGRPCServer(s.dispatcher)
    a --&amp;gt;&amp;gt; s: *MixerServer
    s -&amp;gt;&amp;gt; s: grpcServer.Serve()
    
    loop MixerServer
    activate a
    s -&amp;gt;&amp;gt; a: MixerServer Request
    Note right of a: Mixer服务逻辑
    a -&amp;gt;&amp;gt; rd: Check、Quota等调度
    activate rd
    rd -&amp;gt;&amp;gt; rd: session.dispatch()
    Note right of rd: 根据variety、ns筛选&amp;lt;br/&amp;gt;destinations
    rd -&amp;gt;&amp;gt; rd: s.rc.Routes.GetDestinations()
    Note right of rd: 等待Adapter调度完成
    rd -&amp;gt;&amp;gt; rd: s.waitForDispatched()
    rd --&amp;gt;&amp;gt; a: nil or error
    a --&amp;gt;&amp;gt; s: MixerServer Response
    deactivate rd
    deactivate s
    end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过序列分析对&lt;code&gt;mixs server&lt;/code&gt;有整体的了解，对&lt;code&gt;.yaml&lt;/code&gt;配置逻辑的理解在&lt;code&gt;runtime/config/ephemeral.go&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// BuildSnapshot builds a stable, fully-resolved snapshot view of the configuration.
func (e *Ephemeral) BuildSnapshot() (*Snapshot, error) {
	// ……
	
	// NOTE: e.entries中Kind为attributemanifest的属性，以及e.templates中Variety为TEMPLATE_VARIETY_ATTRIBUTE_GENERATOR生产的属性
	attributes := e.processAttributeManifests(monitoringCtx)
	
	// NOTE: e.entries中Kind为handler，且在e.adapters中有定义的Resource
	shandlers := e.processStaticAdapterHandlerConfigs(monitoringCtx)
	
	// NOTE: e.entries中Kind在e.templates中的Resource
	af := ast.NewFinder(attributes)
	instances := e.processInstanceConfigs(monitoringCtx, af, errs)
    
	// New dynamic configurations
	dTemplates := e.processDynamicTemplateConfigs(monitoringCtx, errs)
	dAdapters := e.processDynamicAdapterConfigs(monitoringCtx, dTemplates, errs)
	dhandlers := e.processDynamicHandlerConfigs(monitoringCtx, dAdapters, errs)
	dInstances := e.processDynamicInstanceConfigs(monitoringCtx, dTemplates, af, errs)
    
	// NOTE: 根据规则匹配默认及动态的handlers、instances配置
	rules := e.processRuleConfigs(monitoringCtx, shandlers, instances, dhandlers, dInstances, af, errs)
	// ……
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;istio-proxy中-mixerclient-执行流程&#34;&gt;istio/proxy中&lt;code&gt;mixerclient&lt;/code&gt;执行流程&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;src/envoy/BUILD

&lt;ul&gt;
&lt;li&gt;http/mixer:filter_lib&lt;/li&gt;
&lt;li&gt;tcp/mixer:filter_lib&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;src/envoy/http、tcp/mixer/filter.cc

&lt;ul&gt;
&lt;li&gt;分别在&lt;code&gt;decodeHeaders()&lt;/code&gt;和&lt;code&gt;onData()&lt;/code&gt;做&lt;code&gt;Check()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;src/istio/control/http、tcp/request_handler_impl.cc

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Check()&lt;/code&gt;先做属性注入&lt;/li&gt;
&lt;li&gt;src/istio/control/client_context_base.cc，&lt;code&gt;SendCheck()&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;调用&lt;code&gt;mixerclient-&amp;gt;Check()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;src/istio/mixerclient/client_impl.cc

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Check()&lt;/code&gt;先获取缓存&lt;code&gt;checkPolicyCache()&lt;/code&gt;，缓存没有命中则走&lt;code&gt;RemoteCheck()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RemoteCheck()&lt;/code&gt;成功后更新缓存&lt;code&gt;updatePolicyCache()&lt;/code&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TB;
  subgraph src/envoy
  A[mixer:filter_lib]--&amp;gt;|&amp;quot;decodeHeaders()&amp;quot;|B(http/mixer/filter.cc)
  A--&amp;gt;|&amp;quot;onData()&amp;quot;|C(tcp/mixer/filter.cc)
  end
  subgraph srv/istio/control
  B--&amp;gt;|&amp;quot;Check(){属性注入}&amp;quot;|D(http/request_handler_impl.cc)
  C--&amp;gt;|&amp;quot;Check(){属性注入}&amp;quot;|E(tcp/request_handler_impl.cc)
  D--&amp;gt;|&amp;quot;SendCheck()&amp;quot;|F(client_context_base.cc)
  E--&amp;gt;|&amp;quot;SendCheck()&amp;quot;|F
  end
  subgraph srv/istio/mixerclient
  F--&amp;gt;|&amp;quot;Check()&amp;quot;|G(client_impl.cc)
  G--&amp;gt;|&amp;quot;①checkPolicyCache()&amp;quot;|H(check_context.cc)
  G--&amp;gt;|&amp;quot;②RemoteCheck()&amp;quot;|G
  G--&amp;gt;|&amp;quot;③updatePolicyCache()&amp;quot;|H
  end
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>【Istio】自定义 Mixer Adapter示例教程(附源码)</title>
      <link>http://hbchen.com/post/2019-03-05-custom-istio-mixer-adapter/</link>
      <pubDate>Tue, 05 Mar 2019 20:44:07 +0800</pubDate>
      
      <guid>http://hbchen.com/post/2019-03-05-custom-istio-mixer-adapter/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;快速开始:&lt;a href=&#34;https://github.com/hb-go/micro-mesh/tree/master/examples/adapter/auth&#34;&gt;micro-mesh/examples/adapter/auth&lt;/a&gt;源码传送门&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;研究Istio下构建简洁的微服务架构，对Istio的研究也更深入，自定义Mixer Adapter必不少，以下结合使用场景做一个自定义适配器的实践分享。&lt;/p&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hb-go/micro-mesh/master/doc/img/micro-mesh.jpg&#34; alt=&#34;auth-adapter&#34; /&gt;
结合&lt;a href=&#34;https://github.com/hb-go/micro-mesh#micro-mesh&#34;&gt;micro-mesh&lt;/a&gt;的实践场景，需要在&lt;code&gt;ingressgateway&lt;/code&gt;与&lt;code&gt;API service&lt;/code&gt;间加入认证&amp;amp;鉴权(JWT&amp;amp;RBAC)，自然考虑Istio提供的&lt;a href=&#34;https://istio.io/zh/docs/concepts/security/&#34;&gt;安全&lt;/a&gt;方案，但使用JWT做认证鉴权在后端是无状态的，这样在使用场景上有一定限制，如:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;密码修改、终端连接限制等场景下无法踢除&lt;/li&gt;
&lt;li&gt;访问控制策略无法实时生效&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;默认方案只是在一些场景下不合适，根据具体需求考虑&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;基于这样的场景可以自定义Adapter来实现，目标:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Token-JWT

&lt;ul&gt;
&lt;li&gt;服务端验证token有效性&lt;/li&gt;
&lt;li&gt;应对密码修改、终端数量限制等场景&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ACL-&lt;a href=&#34;http://github.com/casbin/casbin&#34;&gt;Casbin&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;服务端获取用户角色，做API访问控制&lt;/li&gt;
&lt;li&gt;用户角色及接口授权策略实时生效
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下示例对token验证、访问控制不做具体设计，重点介绍如何自定义一个&lt;code&gt;auth-adapter&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;自定义adapter介绍&#34;&gt;自定义Adapter介绍&lt;/h2&gt;

&lt;p&gt;配置关系及执行流程如图：
&lt;img src=&#34;https://raw.githubusercontent.com/hb-go/micro-mesh/master/doc/img/auth-adapter.jpg&#34; alt=&#34;auth-adapter&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;属性：使用&lt;code&gt;istio&lt;/code&gt;的&lt;code&gt;attributes&lt;/code&gt;，&lt;code&gt;istio/mixer/testdata/config/attributes.yaml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;属性与适配器输入映射模板：使用&lt;code&gt;istio&lt;/code&gt;的&lt;code&gt;authorization&lt;/code&gt;模板，&lt;code&gt;istio/mixer/template/authorization/template.yaml&lt;/code&gt;，通过&lt;code&gt;template.proto&lt;/code&gt;查看协议内容&lt;/li&gt;
&lt;li&gt;适配器，&lt;code&gt;micro-mesh/examples/adapter/auth/config/auth-adapter.yaml&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;go generate ./...&lt;/code&gt;自动生成&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;适配器服务启动配置，&lt;code&gt;micro-mesh/examples/adapter/auth/config/config.proto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;适配器服务实例，&lt;code&gt;micro-mesh/examples/adapter/auth/operatorconfig/cluster-service.yaml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;适配器配置，&lt;code&gt;micro-mesh/examples/adapter/auth/operatorconfig/operator-cfg.yaml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;目录结构&#34;&gt;目录结构&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin                         执行文件
cmd                         
  └ main.go                 适配器入口
config                      配置协议
  ├ adapter.auth.config.pb.html                 #go generate ./... 自动生成
  ├ auth-adapter.yaml       适配器描述文件       #go generate ./... 自动生成
  ├ config.pb.go                                #go generate ./... 自动生成
  ├ config.proto            适配器服务启动配置
  └ config.proto_descriptor                     #go generate ./... 自动生成
operatorconfig              k8s配置
  ├ attributes.yaml         属性                  #copy istio/mixer/testdata/config/attributes.yaml
  ├ cluster-service.yaml    适配器服务实例
  ├ operator-cfg.yaml       适配器配置
  └ template.yaml           属性与适配器输入模板    #copy istio/mixer/template/authorization/template.yaml
testdata                    测试配置
  ├ attributes.yaml         属性                  #copy istio/mixer/testdata/config/attributes.yaml
  ├ auth-adapter.yaml       适配器描述文件         #copy config/auth-adapter.yaml
  ├ operator-cfg.yaml       适配器配置
  └ template.yaml           属性与适配器输入模板    #copy istio/mixer/template/authorization/template.yaml
auth.go                     适配器服务实现
Dockerfile                  Docker镜像
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有3处与适配器实现相关：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;适配器服务启动配置&lt;code&gt;config/config.proto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;适配器服务实现&lt;code&gt;auth.go&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;适配器入口&lt;code&gt;cmd/main.go&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;接下来使用&lt;a href=&#34;https://github.com/hb-go/micro-mesh/tree/master/examples/adapter/auth&#34;&gt;micro-mesh/examples/adapter/auth&lt;/a&gt;源码按步骤操作，实现本地及&lt;code&gt;GKE&lt;/code&gt;环境的测试部署&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;步骤&#34;&gt;步骤&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;开发环境&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OSX&lt;/li&gt;
&lt;li&gt;Go &lt;strong&gt;1.11.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;protoc &lt;strong&gt;libprotoc 3.6.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Istio &lt;strong&gt;1.1.0&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-istio源码&#34;&gt;1.Istio源码&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p $GOPATH/src/istio.io/
cd $GOPATH/src/istio.io/
git clone https://github.com/istio/istio.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-micro-mesh源码&#34;&gt;2.micro-mesh源码&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/hb-go/micro-mesh.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-mixer开发工具&#34;&gt;3.Mixer开发工具&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# build mixer server &amp;amp; client 
cd istio
make mixs
make mixc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在&lt;code&gt;$GOPATH/out/darwin_amd64/release/&lt;/code&gt;生成&lt;code&gt;mixs&lt;/code&gt;、&lt;code&gt;mixc&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-构建auth-adapter项目&#34;&gt;4.构建Auth adapter项目&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# copy auth adapter example
cp {micro-mesh path}/examples/adapter/auth mixer/adapter/auth

cd mixer/adapter/auth
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Optional&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;可以删除&lt;code&gt;config&lt;/code&gt;目录除&lt;code&gt;config.proto&lt;/code&gt;外的其他文件，看执行go generate后的结果&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go generate ./...
go build ./...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;go generate&lt;/code&gt;根据&lt;code&gt;config/config.proto&lt;/code&gt;以及&lt;code&gt;auth.go&lt;/code&gt;的注释自动生成&lt;code&gt;config&lt;/code&gt;目录下的其他文件:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;adapter.auth.config.pb.html&lt;/li&gt;
&lt;li&gt;auth-adapter.yaml&lt;/li&gt;
&lt;li&gt;config.pb.go&lt;/li&gt;
&lt;li&gt;config.proto_descriptor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;根据&lt;code&gt;auth.go&lt;/code&gt;的以下注释，&lt;code&gt;mixer_codegen.sh&lt;/code&gt;使用&lt;code&gt;authorization&lt;/code&gt;模板生成&lt;code&gt;name&lt;/code&gt;为&lt;code&gt;auth-adapter&lt;/code&gt;的适配器&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// nolint:lll
// Generates the auth adapter&#39;s resource yaml. It contains the adapter&#39;s configuration, name, supported template
// names (metric in this case), and whether it is session or no-session based.
//go:generate $GOPATH/src/istio.io/istio/bin/mixer_codegen.sh -a mixer/adapter/auth/config/config.proto -x &amp;quot;-s=false -n auth-adapter -t authorization&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;5-本地测试&#34;&gt;5.本地测试&lt;/h3&gt;

&lt;p&gt;本地测试使用testdata下的配置，其中&lt;code&gt;operator-cfg.yaml&lt;/code&gt;有几处与正式部署不同：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;handler&lt;/code&gt;的&lt;code&gt;address&lt;/code&gt;使用本地服务&lt;code&gt;&amp;quot;[::]:44225&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;为了方便测试&lt;code&gt;instance&lt;/code&gt;的&lt;code&gt;params&lt;/code&gt;参数以及&lt;code&gt;rule&lt;/code&gt;的&lt;code&gt;math&lt;/code&gt;条件做了简化&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 启动适配器服务
go run cmd/main.go 44225

# 使用testdata下配置启动mixer server
$GOPATH/out/darwin_amd64/release/mixs server \
--configStoreURL=fs://$GOPATH/src/istio.io/istio/mixer/adapter/auth/testdata \
--log_output_level=default:debug,attributes:debug

# 测试Adapter是否生效
$GOPATH/out/darwin_amd64/release/mixc check -s request.host=&amp;quot;localhost&amp;quot; --stringmap_attributes &amp;quot;request.headers=x-custom-token:efg&amp;quot;
# Check RPC completed successfully. Check status was PERMISSION_DENIED (mm-example-auth.handler.istio-system:Unauthorized...)

$GOPATH/out/darwin_amd64/release/mixc check -s request.host=&amp;quot;localhost&amp;quot; --stringmap_attributes &amp;quot;request.headers=x-custom-token:abc&amp;quot;
# Check RPC completed successfully. Check status was OK
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE:出现预期结果不一致可能是由于mixer cache导致&lt;code&gt;Valid use count: 10000, valid duration: 9.726875254s&lt;/code&gt;，请参考&lt;a href=&#34;http://www.servicemesher.com/categories/istio-mixer-cache&#34;&gt;Istio Mixer Cache&lt;/a&gt;系列文章了解&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;6-打包镜像&#34;&gt;6.打包镜像&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# build执行文件
CGO_ENABLED=0 GOOS=linux \
    go build -a -installsuffix cgo -v -o bin/auth ./cmd/
    
# docker镜像
docker build -t hbchen/micro-mesh-example-adapter-auth:v0.0.1 .
docker push hbchen/micro-mesh-example-adapter-auth:v0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-istio环境部署&#34;&gt;7.Istio环境部署&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;部署环境&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GKE &lt;strong&gt;1.12.5-gke.10&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Istio &lt;strong&gt;1.1.0&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 属性、模板
# attributes.yaml -&amp;gt; istio/mixer/testdata/config/attributes.yaml 
# template.yaml -&amp;gt; istio/mixer/template/authorization/template.yaml
kubectl apply -f examples/adapter/auth/testdata/attributes.yaml -f examples/adapter/auth/testdata/template.yaml

# 适配器
kubectl apply -f examples/adapter/auth/config/auth-adapter.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;这里是以&lt;a href=&#34;https://github.com/hb-go/micro-mesh&#34;&gt;micro-mesh&lt;/a&gt;示例为基础的配置，如果使用&lt;code&gt;bookinfo&lt;/code&gt;或者自己的服务需要做相应的修改&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;operator-cfg.yaml&lt;/code&gt;与本地测试配置不同：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;handler&lt;/code&gt;的&lt;code&gt;address&lt;/code&gt;使用集群服务&lt;code&gt;&amp;quot;mm-example-auth-adapter-service:44225&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;instance&lt;/code&gt;的&lt;code&gt;params&lt;/code&gt;根据&lt;code&gt;authorization&lt;/code&gt;模板及&lt;code&gt;auth-adapter&lt;/code&gt;服务的需求配置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rule&lt;/code&gt;的&lt;code&gt;match&lt;/code&gt;条件使用&lt;code&gt;destination.service.name == &amp;quot;mm-example-api&amp;quot;&lt;/code&gt;或&lt;code&gt;destination.service.host == &amp;quot;mm-example-api.default.svc.cluster.local&amp;quot;&lt;/code&gt;，仅对&lt;code&gt;mm-example-api&lt;/code&gt;服务生效&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 适配器服务实例部署
kubectl apply -f examples/adapter/auth/operatorconfig/cluster-service.yaml

# 适配器配置
kubectl apply -f examples/adapter/auth/operatorconfig/operator-cfg.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;8-istio环境部署测试&#34;&gt;8.Istio环境部署测试&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;如果没有开Gateway的JWT验证可以忽略&lt;code&gt;Authorization&lt;/code&gt;，其实做了自定义Auth后是多余的😂&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;TOKEN=$(curl https://raw.githubusercontent.com/istio/istio/release-1.1/security/tools/jwt/samples/demo.jwt -s)

curl -H &amp;quot;Authorization: Bearer $TOKEN&amp;quot; -H &amp;quot;x-custom-token: efg&amp;quot; -H &amp;quot;Grpc-Metadata-x-tier: 2&amp;quot; -X GET http://35.192.111.18/v1/example/call/Hobo
curl -H &amp;quot;Authorization: Bearer $TOKEN&amp;quot; -H &amp;quot;x-custom-token: abc&amp;quot; -H &amp;quot;Grpc-Metadata-x-tier: 2&amp;quot; -X GET http://35.192.111.18/v1/example/call/Hobo

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/istio/istio/wiki/Mixer-Out-of-Process-Adapter-Walkthrough&#34;&gt;Mixer Out of Process Adapter Walkthrough&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/google-cloud/simple-istio-mixer-out-of-process-authorization-adapter-5f9363cd9bbc&#34;&gt;Simple Istio Mixer Out of Process Authorization Adapter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>go-micro加入Istio服务网格</title>
      <link>http://hbchen.com/post/2019-01-08-go-micro%E5%8A%A0%E5%85%A5istio%E6%9C%8D%E5%8A%A1%E7%BD%91%E6%A0%BC/</link>
      <pubDate>Thu, 21 Feb 2019 16:59:37 +0800</pubDate>
      
      <guid>http://hbchen.com/post/2019-01-08-go-micro%E5%8A%A0%E5%85%A5istio%E6%9C%8D%E5%8A%A1%E7%BD%91%E6%A0%BC/</guid>
      
        <description>&lt;p&gt;将go-micro服务加入service mesh，Client、Server不需要Registry、Selector、Transport等，通过自定义micro的server &amp;amp; client插件，去掉在istio中不需要的组件依赖。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://hbchen.com/img/go-micro-istio.jpg&#34; alt=&#34;go-micro&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hb-go/micro-plugins&#34;&gt;hb-go/micro-plugins&lt;/a&gt;实现了gRPC、http的Istio版本Plugin，下面介绍如何使用。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;完整示例参考&lt;a href=&#34;https://github.com/hb-go/micro/tree/master/istio&#34;&gt;hb-go/micro/istio&lt;/a&gt;，示例包括http、gRPC&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;命令行参数&#34;&gt;命令行参数&lt;/h5&gt;

&lt;p&gt;方便服务运行时指定端口，在命令行获取服务server、client端口配置，参数根据具体情况自行设计&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在服务网格中我倾向统一上下游服务端口，避免不必要的配置以及因此引发的冲突问题&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Client端服务地址&lt;code&gt;CallOptions.Address&lt;/code&gt;解析规则：

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:&lt;/code&gt;开头，将&lt;code&gt;service.Name&lt;/code&gt;中&lt;code&gt;.&lt;/code&gt;替换为&lt;code&gt;-&lt;/code&gt;，加&lt;code&gt;CallOptions.Address&lt;/code&gt;，如&lt;code&gt;go.micro.api.sample&lt;/code&gt; &lt;code&gt;:9080&lt;/code&gt; =&amp;gt; &lt;code&gt;go-micro-api-sample:9080&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;非&lt;code&gt;:&lt;/code&gt;开头，固定地址&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var (
	serverAddr string
	callAddr   string
	cmdHelp    bool
)

func init() {
	flag.StringVar(&amp;amp;serverAddr, &amp;quot;server_address&amp;quot;, &amp;quot;0.0.0.0:9080&amp;quot;, &amp;quot;server address.&amp;quot;)
	flag.StringVar(&amp;amp;callAddr, &amp;quot;client_call_address&amp;quot;, &amp;quot;:9080&amp;quot;, &amp;quot;client call options address.&amp;quot;)
	flag.Parse()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;自定义server-client插件-创建服务&#34;&gt;自定义server、client插件，创建服务&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;由于micro框架对命令行的解析问题，创建服务时需要增加&lt;code&gt;micro.Flags(...)&lt;/code&gt;，兼容自定义参数，如:&lt;code&gt;client_call_address&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
	httpClient &amp;quot;github.com/hb-go/micro-plugins/client/istio_http&amp;quot;
	httpServer &amp;quot;github.com/hb-go/micro-plugins/server/istio_http&amp;quot;
)

func main() {
	c := httpClient.NewClient(
		client.ContentType(&amp;quot;application/json&amp;quot;),
		func(o *client.Options) {
			o.CallOptions.Address = callAddr
		},
	)
	s := httpServer.NewApiServer(
		server.Address(serverAddr),
	)

	// New Service
	service := micro.NewService(
		micro.Name(&amp;quot;go.micro.api.sample&amp;quot;),
		micro.Version(&amp;quot;latest&amp;quot;),
		micro.Registry(noop.NewRegistry()),
		micro.Client(c),
		micro.Server(s),

		// 兼容micro cmd parse
		micro.Flags(cli.StringFlag{
			Name:   &amp;quot;client_call_address&amp;quot;,
			EnvVar: &amp;quot;MICRO_CLIENT_CALL_ADDRESS&amp;quot;,
			Usage:  &amp;quot; Invalid!!!&amp;quot;,
		}),
	)

	service.Options().Cmd.Init()
	
	// ……
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;服务部署-yaml&#34;&gt;服务部署.yaml&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;其它Istio相关.yaml参考完整示例&lt;a href=&#34;https://github.com/hb-go/micro/tree/master/istio/k8s&#34;&gt;hb-go/micro/istio/k8s&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;######################################################################################
# API service
######################################################################################
apiVersion: v1
kind: Service
metadata:
  name: go-micro-api-sample
  labels:
    app: go-micro-api-sample
spec:
  ports:
  - port: 9080
    name: http
  selector:
    app: go-micro-api-sample
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: go-micro-api-sample-v1
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: go-micro-api-sample
        version: v1
    spec:
      containers:
      - name: go-micro-api-sample
        command: [
          &amp;quot;/sample&amp;quot;,
          &amp;quot;-server_address=0.0.0.0:9080&amp;quot;,
          &amp;quot;-client_call_address=:9080&amp;quot;,
        ]
        image: hbchen/go-micro-istio-api-sample:v0.0.5
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9080
---
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Spark &#43; Elasticsearch构建推荐系统</title>
      <link>http://hbchen.com/post/2018-10-24-spark-elasticsearch-recommender/</link>
      <pubDate>Wed, 24 Oct 2018 16:23:46 +0800</pubDate>
      
      <guid>http://hbchen.com/post/2018-10-24-spark-elasticsearch-recommender/</guid>
      
        <description>&lt;p&gt;Github &lt;a href=&#34;https://github.com/hb-chen/spark-elasticsearch-recommender&#34;&gt;hb-chen/spark-elasticsearch-recommender&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Zeppelin &lt;code&gt;0.8.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Spark &lt;code&gt;2.3.2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Elasticsearch &lt;code&gt;6.3.2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;1-环境准备&#34;&gt;1.环境准备&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Mac OSX&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;zeppeline&#34;&gt;Zeppeline&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# http://www.apache.org/dyn/closer.cgi/zeppelin/zeppelin-0.8.0/zeppelin-0.8.0-bin-netinst.tgz
$ wget http://mirrors.shu.edu.cn/apache/zeppelin/zeppelin-0.8.0/zeppelin-0.8.0-bin-netinst.tgz
$ tar -zxf zeppelin-0.8.0-bin-netinst.tgz
$ cd zeppelin-0.8.0-bin-netinst

# 安装必要interpreter
$ ./bin/install-interpreter.sh --name md,elasticsearch
$ ./bin/zeppelin-daemon.sh start
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;spark&#34;&gt;Spark&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# http://spark.apache.org/downloads.html
$ wget https://www.apache.org/dyn/closer.lua/spark/spark-2.3.2/spark-2.3.2-bin-hadoop2.7.tgz
$ tar -zxf spark-2.3.2-bin-hadoop2.7.tgz
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;elasticsearch&#34;&gt;Elasticsearch&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# https://www.elastic.co/downloads/past-releases
# Elasticsearch + 6.3.2
$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.3.2.zip
$ unzip elasticsearch-6.3.2.zip

# ES-Hadoop + 6.3.2
$ wget https://artifacts.elastic.co/downloads/elasticsearch-hadoop/elasticsearch-hadoop-6.3.2.zip
$ unzip elasticsearch-hadoop-6.3.2.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;elasticsearch-矢量评分插件&#34;&gt;Elasticsearch 矢量评分插件&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/muhleder/elasticsearch-vector-scoring&#34;&gt;muhleder/elasticsearch-vector-scoring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 修改build.gradle，这样不必Checkout Elasticsearch 
# https://github.com/muhleder/elasticsearch-vector-scoring/issues/1#issuecomment-415267767
buildscript {
  repositories {
    jcenter()
    mavenLocal()
  }
  dependencies {
    classpath &amp;quot;org.elasticsearch.gradle:build-tools:6.3.2&amp;quot;
  }
}

apply plugin: &#39;idea&#39;
apply plugin: &#39;java&#39;
apply plugin: &#39;elasticsearch.esplugin&#39;

licenseFile = rootProject.file(&#39;LICENSE&#39;)
noticeFile = rootProject.file(&#39;NOTICE&#39;)

esplugin {
  name &#39;elasticsearch-vector-scoring&#39;
  description &#39;Provides a fast vector multiplication script.&#39;
  classname &#39;com.gosololaw.elasticsearch.VectorScoringPlugin&#39;
}

dependencies {
  compile &amp;quot;org.elasticsearch:elasticsearch:6.3.2&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 插件安装
$ ./bin/elasticsearch-plugin install {file:///path/to/plugin.zip}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;python依赖库&#34;&gt;Python依赖库&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pip install elasticsearch
$ pip install numpy
$ pip install tmdbsimple # 忽略，暂时未使用
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;movielens数据集-https-grouplens-org-datasets-movielens-下载&#34;&gt;&lt;a href=&#34;https://grouplens.org/datasets/movielens/&#34;&gt;Movielens数据集&lt;/a&gt;下载&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd data # 与zeppelin-0.8.0-bin-netinst同Path，note中配置PATH_TO_DATA = &amp;quot;../data/ml-latest-small&amp;quot;
$ wget http://files.grouplens.org/datasets/movielens/ml-latest-small.zip
$ unzip ml-latest-small.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-启动服务&#34;&gt;2.启动服务&lt;/h4&gt;

&lt;h5 id=&#34;elasticsearch启动&#34;&gt;Elasticsearch启动&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./bin/elasticsearch
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;zeppelin配置及启动&#34;&gt;Zeppelin配置及启动&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cp conf/shiro.ini.template conf/shiro.ini
$ vim conf/shiro.ini
# 管理员账户密码
[users]
admin = 123456, admin

$ cp conf/zeppelin-env.sh.template conf/zeppelin-env.sh
$ vim conf/zeppelin-env.sh
# Spark配置
export SPARK_HOME=/{apache-spark-path}/spark-2.3.2-bin-hadoop2.7
export SPARK_SUBMIT_OPTIONS=&amp;quot;--driver-memory 2G&amp;quot;

$ cp conf/zeppelin-site.xml.template conf/zeppelin-site.xml
$ vim conf/zeppelin-site.xml
# 根据需要可以修改zeppelin.server.port等配置

# 启动
$ ./bin/zeppelin-daemon.sh start
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-notebook&#34;&gt;3.Notebook&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Create new interpreter
# md

# elasticsearch
elasticsearch.client.type http
elasticsearch.port	9200

# spark
# 添加Dependencies
artifact /{elasticsearch-hadoop-path}/elasticsearch-hadoop-6.3.2/dist/elasticsearch-spark-20_2.11-6.3.2.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;参考&#34;&gt;参考&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/IBM/elasticsearch-spark-recommender&#34;&gt;使用 Apache Spark 和 Elasticsearch 构建一个推荐系统&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>go-micro框架介绍</title>
      <link>http://hbchen.com/post/2018-03-27-go-micro-%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Tue, 27 Mar 2018 19:09:32 +0800</pubDate>
      
      <guid>http://hbchen.com/post/2018-03-27-go-micro-%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/</guid>
      
        <description>&lt;h2 id=&#34;go-micro-https-github-com-micro-go-micro&#34;&gt;&lt;a href=&#34;https://github.com/micro/go-micro&#34;&gt;go-micro&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;go-micro是Micro的核心，是一套Go语言的可插拔RPC框架，提供服务发现、负载均衡、同步/异步通信、编码、服务接口等，所有组件均设计为Interface，便于扩展&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://hbchen.com/img/go-micro.jpg&#34; alt=&#34;go-micro&#34; /&gt;&lt;/p&gt;

&lt;p&gt;主要有以下组件构成:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Registry&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;提供一套服务注册、发现、注销、监测机制，服务注册中心支持consul、etcd2/3、zookeeper、gossip、k8s、eureka等&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Selector&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;选择器提供了负载均衡，可以通过过滤方法对微服务进行过滤，并通过不同路由算法选择微服务，以及缓存等&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Transport&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;微服务间同步请求/响应通信方式，相对Go标准net包做了更高的抽象，支持更多的传输方式，如http、grpc、tcp、udp、Rabbitmq等&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Broker&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;微服务间异步发布/订阅通信方式，更好的处理分布式系统解耦问题，默认使用http方式，生产环境通常会使用消息中间件，如Kafka、RabbitMQ、NSQ等&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Codec&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;服务间消息的编解码，支持json、protobuf、bson、msgpack等，与普通编码格式不同都是支持RPC格式&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Server&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;用于启动服务，为服务命名、注册Handler、添加中间件等&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Client&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;提供微服务客户端，通过Registry、Selector、Transport、Broker实现以服务名来查找服务、负载均衡、同步通信、异步消息等&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;micro-https-github-com-micro-micro&#34;&gt;&lt;a href=&#34;https://github.com/micro/micro&#34;&gt;micro&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Micro的工具包，主要由以下部分构成:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;API&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;API网关提供HTTP服务，并将请求路由到指定的微服务，是Micro的统一入口，可以用作反向代理，或者将HTTP请求转到RPC&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Web&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;为Micro提供一套仪表盘，并可作为Web应用的反向代理，有别于普通API将Web应用作为了Micro的一等公民，其实和API差不多，但同时提供了对socket的支持&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sidecar&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;通过HTTP的方式实现go-micro全部功能的RPC代理，通过Sidecar可以方便的将其他语言集成到Micro框架中，方便解决解决应用的异构框架问题&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;CLI&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;提供一套命令行工具，可以方便的与Micro服务进行交互，并且可以通过Sidecar代理CLI命令&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Bot&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;通过Bot可以在Micro环境中方便的与Slack、HipChat、XMPP等进行集成，通过消息的方式模仿CLI功能&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;go-plugins-https-github-com-micro-go-plugins&#34;&gt;&lt;a href=&#34;https://github.com/micro/go-plugins&#34;&gt;go-plugins&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;go-plugins是Micro的插件库，除go-micro相应组件的扩展外，还有其他如Trace、KV存储、监控等&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Centos VSFTP配置</title>
      <link>http://hbchen.com/post/2014-10-17-centos-vsftp/</link>
      <pubDate>Fri, 17 Oct 2014 16:18:00 +0800</pubDate>
      
      <guid>http://hbchen.com/post/2014-10-17-centos-vsftp/</guid>
      
        <description>&lt;p&gt;安装&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install vsftp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#/etc/vsftpd/vsftpd.conf
#关闭匿名登录
#anonymous_enable=NO

user_list中的说明是userlist_deny
#userlist_enable=NO

FTP root
#local_root=/mnt/ftp

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;添加登录用户&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;添加用户
$ useradd Hobo
设置密码
$ passwd Hobo
$加入user_list
$ echo Hobo &amp;gt;&amp;gt; /etc/vsftpd/user_list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重启&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$service vsftpd restart
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>MySQL Backup</title>
      <link>http://hbchen.com/post/2014-10-17-mysql-backup/</link>
      <pubDate>Fri, 17 Oct 2014 14:04:00 +0800</pubDate>
      
      <guid>http://hbchen.com/post/2014-10-17-mysql-backup/</guid>
      
        <description>&lt;p&gt;MySQL备份脚本，支持mysqldump,mysqlhotcopy,tar三种方式，+定时任务自动备份。&lt;/p&gt;

&lt;p&gt;Gist
&lt;a href=&#34;https://gist.github.com/Hobo86/effd4b45b50f576bf4d1&#34;&gt;https://gist.github.com/Hobo86/effd4b45b50f576bf4d1&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#脚本属性设为可执行
$ chmod +x mysql_backup.sh
 
#编辑定时任务
$ vi /etc/crontab
 
如：每天03:01执行备份脚本
01 3 * * * root /usr/sbin/mysql_backup.sh
 
#重启定时任务
$ /etc/rc.d/init.d/crond restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gist
&lt;a href=&#34;https://gist.github.com/Hobo86/29b27d361a4c59545348&#34;&gt;https://gist.github.com/Hobo86/29b27d361a4c59545348&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#mysql_backup.sh
#!/bin/bash
 
DBName=db_name
 
DBUser=root
 
DBPasswd=123456
 
BackupPath=/mnt/backup/
 
LogFile=/mnt/backup/db_name.log
 
DBPath=/mnt/mysql/
 
BackupMethod=mysqldump
 
#BackupMethod=mysqlhotcopy
 
#BackupMethod=tar
 
 
NewFile=&amp;quot;$BackupPath&amp;quot;db_name_$(date +%y%m%d).tgz
 
DumpFile=&amp;quot;$BackupPath&amp;quot;db_name_$(date +%y%m%d)
 
OldFile=&amp;quot;$BackupPath&amp;quot;db_name_$(date +%y%m%d --date=&#39;5 days ago&#39;).tgz
 
#SettingEnd
 
echo &amp;quot;-------------------------------------------&amp;quot;&amp;gt;&amp;gt;$LogFile
echo $(date +%Y-%m-%d%t%H:%M:%S)&amp;gt;&amp;gt;$LogFile
 
echo &amp;quot;--------------------------&amp;quot;&amp;gt;&amp;gt;$LogFile
 
#DeleteOldFile
if [ -f $OldFile ]
	then
		rm -f $OldFile&amp;gt;&amp;gt;$LogFile 2&amp;gt;&amp;amp;1
		echo &amp;quot;[$OldFile]DeleteOldFileSuccess!&amp;quot;&amp;gt;&amp;gt;$LogFile
	else
		echo &amp;quot;[$OldFile]NoOldBackupFile!&amp;quot;&amp;gt;&amp;gt;$LogFile
fi
 
if [ -f $NewFile ] 
	then
		echo &amp;quot;[$NewFile]TheBackupFileisexists,Can&#39;tBackup!&amp;quot;&amp;gt;&amp;gt;$LogFile
	else
		case $BackupMethod in
		mysqldump)
 			if [ -z $DBPasswd ] 
				then
					mysqldump -u$DBUser --opt $DBName&amp;gt;$DumpFile
				else
					mysqldump -u$DBUser -p$DBPasswd --opt $DBName&amp;gt;$DumpFile
			fi
 
			tar czvf $NewFile $DumpFile&amp;gt;&amp;gt;$LogFile 2&amp;gt;&amp;amp;1
			echo &amp;quot;[$NewFile]BackupSuccess!&amp;quot;&amp;gt;&amp;gt;$LogFile
 			rm -rf $DumpFile
		;;
 
		mysqlhotcopy)
 			rm -rf $DumpFile
 			mkdir $DumpFile
 
			if [ -z $DBPasswd ] 
				then
					mysqlhotcopy -u$DBUser $DBName $DumpFile&amp;gt;&amp;gt;$LogFile 2&amp;gt;&amp;amp;1
				else
					mysqlhotcopy -u$DBUser -p$DBPasswd $DBName $DumpFile&amp;gt;&amp;gt;$LogFile2&amp;gt;&amp;amp;1
			fi
 
			tar czvf $NewFile $DumpFile&amp;gt;&amp;gt;$LogFile 2&amp;gt;&amp;amp;1
			echo &amp;quot;[$NewFile]BackupSuccess!&amp;quot;&amp;gt;&amp;gt;$LogFile
			rm -rf $DumpFile
		;;
 
		*)
			/etc/init.d/mysqldstop&amp;gt;/dev/null2&amp;gt;&amp;amp;1
			tar czvf $NewFile $DBPath$DBName&amp;gt;&amp;gt;$LogFile 2&amp;gt;&amp;amp;1
			/etc/init.d/mysqldstart&amp;gt;/dev/null2&amp;gt;&amp;amp;1
			echo &amp;quot;[$NewFile]BackupSuccess!&amp;quot;&amp;gt;&amp;gt;$LogFile
		;;
 
		esac
fi
echo &amp;quot;-------------------------------------------&amp;quot;&amp;gt;&amp;gt;$LogFile
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>[转]Git-项目自动部署</title>
      <link>http://hbchen.com/post/2014-10-17-xiang-mu-zi-dong-bu-shu-git/</link>
      <pubDate>Fri, 17 Oct 2014 13:29:00 +0800</pubDate>
      
      <guid>http://hbchen.com/post/2014-10-17-xiang-mu-zi-dong-bu-shu-git/</guid>
      
        <description>&lt;p&gt;Git push后自动更新项目部署，&amp;rdquo;[deploy]&amp;ldquo;部署的分支为master。&lt;/p&gt;

&lt;p&gt;Gist
&lt;/br&gt;&lt;a href=&#34;https://gist.github.com/icyleaf/566767&#34;&gt;https://gist.github.com/icyleaf/566767&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ vi post-receive

#!/bin/sh
#
# git autodeploy script when it matches the string &amp;quot;[deploy]&amp;quot;
#
# @author    icyleaf &amp;lt;icyleaf.cn@gmail.com&amp;gt;
# @link      http://icyleaf.com
# @version   0.1
#
# Usage:
#       1. put this into the post-receive hook file itself below
#       2. `chmod +x post-recive` 
#       3. Done!
 
# Check the remote git repository whether it is bare
IS_BARE=$(git rev-parse --is-bare-repository)
if [ -z &amp;quot;$IS_BARE&amp;quot; ]; then
	echo &amp;gt;&amp;amp;2 &amp;quot;fatal: post-receive: IS_NOT_BARE&amp;quot;
	exit 1
fi
 
# Get the latest commit subject
SUBJECT=$(git log -1 --pretty=format:&amp;quot;%s&amp;quot;)
 
# Deploy the HEAD sources to publish
IS_PULL=$(echo &amp;quot;$SUBJECT&amp;quot; | grep &amp;quot;\[deploy\]&amp;quot;)
if [ -z &amp;quot;$IS_PULL&amp;quot; ]; then
	echo &amp;gt;&amp;amp;2 &amp;quot;tips: post-receive: IS_NOT_PULL&amp;quot;
	exit 1
fi
 
# Check the deploy dir whether it exists
DEPLOY_DIR=/home/icyleaf/php/icyleaf/
if [ ! -d $DEPLOY_DIR ] ; then
	echo &amp;gt;&amp;amp;2 &amp;quot;fatal: post-receive: DEPLOY_DIR_NOT_EXIST: \&amp;quot;$DEPLOY_DIR\&amp;quot;&amp;quot;
	exit 1
fi
 
# Check the deploy dir whether it is git repository
#
#IS_GIT=$(git rev-parse --git-dir 2&amp;gt;/dev/null)
#if [ -z &amp;quot;$IS_GIT&amp;quot; ]; then
#	echo &amp;gt;&amp;amp;2 &amp;quot;fatal: post-receive: IS_NOT_GIT&amp;quot;
#	exit 1
#fi
 
# Goto the deploy dir and pull the latest sources
cd $DEPLOY_DIR
env -i git reset --hard
env -i git pull
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Redmine Plugins</title>
      <link>http://hbchen.com/post/2014-04-15-redmine-plugins/</link>
      <pubDate>Tue, 15 Apr 2014 12:09:00 +0800</pubDate>
      
      <guid>http://hbchen.com/post/2014-04-15-redmine-plugins/</guid>
      
        <description>&lt;p&gt;Git版本库工具-&lt;a href=&#34;https://github.com/CtrlC-Root/redmine-gitolite/&#34;&gt;Gitolite&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;知识积累工具-&lt;a href=&#34;https://github.com/alexbevi/redmine_knowledgebase/&#34;&gt;Knowledgebase&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Mac安装配置MongoDB&#43;RockMongo</title>
      <link>http://hbchen.com/post/2014-03-11-mac-mongodb-rockmongo/</link>
      <pubDate>Tue, 11 Mar 2014 18:00:00 +0800</pubDate>
      
      <guid>http://hbchen.com/post/2014-03-11-mac-mongodb-rockmongo/</guid>
      
        <description>&lt;p&gt;MongoDB安装
&lt;/br&gt;使用brew安装很方便
&lt;/br&gt;&lt;a href=&#34;http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/&#34;&gt;http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;安装完成后可以选择修改配置文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#mongod.conf
#dbpath,logpath,bind_ip
vi /usr/local/etc/mongod.conf

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#为了方便使用配置.bash_profile
vi ~/.bash_profile

#添加以下内容
export PATH=$PATH:/usr/local/opt/mongodb/bin
alias mongodb_start=&#39;sudo launchctl load -w /usr/local/Cellar/mongodb/2.4.9/homebrew.mxcl.mongodb.plist&#39;
alias mongodb_stop=&#39;sudo launchctl unload -w /usr/local/Cellar/mongodb/2.4.9/homebrew.mxcl.mongodb.plist&#39;
alias mongodb_restart=&#39;mongodb_stop; mongodb_start;&#39;

#这样直接使用mongodb_start,mongodb_stop,mongodb_restart很方便

#启动
mongodb_start

#配置用户名密码
mongo
db show
use test
db.addUser(&amp;quot;root&amp;quot;, &amp;quot;123456&amp;quot;)

#重启
mongodb_restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;管理工具RockMongo，下载后根据自己的PHP环境配置
&lt;/br&gt;&lt;a href=&#34;http://rockmongo.com/downloads&#34;&gt;http://rockmongo.com/downloads&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;安装php-mongo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#我用的php54，记下安装后的路径
brew php54-mongo

#配置php.ini
#添加或者修改extension=&amp;quot;mongo.so&amp;quot;
extension=&amp;quot;/usr/local/Cellar/php54-mongo/1.4.5/mongo.so&amp;quot;

#启动/重启Php环境
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>BAE Cache&amp;Redis实现ThinkPHP的Cache驱动</title>
      <link>http://hbchen.com/post/2014-03-06-bae-redisshi-xian-thinkphpcache/</link>
      <pubDate>Thu, 06 Mar 2014 19:00:00 +0800</pubDate>
      
      <guid>http://hbchen.com/post/2014-03-06-bae-redisshi-xian-thinkphpcache/</guid>
      
        <description>&lt;p&gt;在BAE环境下有单独的Cache，同时也有Redis，可以同时用来做不同的Cache服务，先从Redis开始&lt;/p&gt;

&lt;p&gt;1、Redis相关配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;//conf.php
#BAE API Key与Secret Key
&#39;BAE_AK&#39; 	=&amp;gt; &#39;XXX&#39;,
&#39;BAE_SK&#39;	=&amp;gt; &#39;XXX&#39;,

#BAE Redis扩展配置
&#39;BAE_REDIS_HOST&#39;   =&amp;gt;	&#39;redis.duapp.com&#39;,
&#39;BAE_REDIS_PORT&#39;   =&amp;gt;	80,
&#39;BAE_REDIS_DBNAME&#39; =&amp;gt;	&#39;XXX&#39;,

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以选择将Redis是否设为默认缓存，如果不是，使用时注意切换&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$cache = Cache::getInstance(&#39;Baeredis&#39;,array());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2、Redis Cache 驱动&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;//CacheBaeredis.class.php
#根据CacheRedis.class.php修改

&amp;lt;?php

defined(&#39;THINK_PATH&#39;) or exit();


class CacheBaeredis extends Cache {
	 /**
	 * 架构函数
     * @param array $options 缓存参数
     * @access public
     */
    public function __construct($options=array()) {
        if ( !extension_loaded(&#39;redis&#39;) ) {
            throw_exception(L(&#39;_NOT_SUPPERT_&#39;).&#39;:redis&#39;);
        }
        if(empty($options)) {
            $options = array (
                &#39;host&#39;          =&amp;gt; C(&#39;BAE_REDIS_HOST&#39;) ? C(&#39;BAE_REDIS_HOST&#39;) : &#39;127.0.0.1&#39;,
                &#39;port&#39;          =&amp;gt; C(&#39;BAE_REDIS_PORT&#39;) ? C(&#39;BAE_REDIS_PORT&#39;) : 80,
                &#39;timeout&#39;       =&amp;gt; C(&#39;DATA_CACHE_TIMEOUT&#39;) ? C(&#39;DATA_CACHE_TIMEOUT&#39;) : false,
                &#39;persistent&#39;    =&amp;gt; false,
            );
        }
        $this-&amp;gt;options =  $options;
        $this-&amp;gt;options[&#39;expire&#39;] =  isset($options[&#39;expire&#39;])?  $options[&#39;expire&#39;]  :   C(&#39;DATA_CACHE_TIME&#39;);
        $this-&amp;gt;options[&#39;prefix&#39;] =  isset($options[&#39;prefix&#39;])?  $options[&#39;prefix&#39;]  :   C(&#39;DATA_CACHE_PREFIX&#39;);        
        $this-&amp;gt;options[&#39;length&#39;] =  isset($options[&#39;length&#39;])?  $options[&#39;length&#39;]  :   0;        
            
        try {
            /*建立连接后，在进行集合操作前，需要先进行auth验证*/
            $this-&amp;gt;handler = new Redis();
            $ret;
            if ($options[&#39;timeout&#39;] === false) {
                $ret = $this-&amp;gt;handler-&amp;gt;connect($options[&#39;host&#39;], $options[&#39;port&#39;]);
            }
            else {
                $ret = $this-&amp;gt;handler-&amp;gt;connect($options[&#39;host&#39;], $options[&#39;port&#39;], $options[&#39;timeout&#39;]);
            }

            if ($ret === false) {
                throw new RedisException($this-&amp;gt;handler-&amp;gt;getLastError());
            }

            $user = C(&#39;BAE_AK&#39;);
            $pwd = C(&#39;BAE_SK&#39;);
            $dbname = C(&#39;BAE_REDIS_DBNAME&#39;);

            $ret = $this-&amp;gt;handler-&amp;gt;auth($user . &amp;quot;-&amp;quot; . $pwd . &amp;quot;-&amp;quot; . $dbname);
            if ($ret === false) {
                throw new RedisException($this-&amp;gt;handler-&amp;gt;getLastError());
            }
         
        } catch (RedisException $e) {
            throw_exception(&#39;BAE Redis:&#39;.$e-&amp;gt;getMessage());
        }


    }

    /**
     * 读取缓存
     * @access public
     * @param string $name 缓存变量名
     * @return mixed
     */
    public function get($name) {
        N(&#39;cache_read&#39;,1);
        $value = $this-&amp;gt;handler-&amp;gt;get($this-&amp;gt;options[&#39;prefix&#39;].$name);
        $jsonData  = json_decode( $value, true );
        return ($jsonData === NULL) ? $value : $jsonData;	//检测是否为JSON数据 true 返回JSON解析数组, false返回源数据
    }

    /**
     * 写入缓存
     * @access public
     * @param string $name 缓存变量名
     * @param mixed $value  存储数据
     * @param integer $expire  有效时间（秒）
     * @return boolen
     */
    public function set($name, $value, $expire = null) {
        N(&#39;cache_write&#39;,1);
        if(is_null($expire)) {
            $expire  =  $this-&amp;gt;options[&#39;expire&#39;];
        }
        $name   =   $this-&amp;gt;options[&#39;prefix&#39;].$name;
        //对数组/对象数据进行缓存处理，保证数据完整性
        $value  =  (is_object($value) || is_array($value)) ? json_encode($value) : $value;

        //相对CacheRedis的驱动增加了expire&amp;gt;0的判断
        if(is_int($expire) &amp;amp; $expire &amp;gt; 0) {
            $result = $this-&amp;gt;handler-&amp;gt;setex($name, $expire, $value);
        }else{
            $result = $this-&amp;gt;handler-&amp;gt;set($name, $value);
        }
        if($result &amp;amp;&amp;amp; $this-&amp;gt;options[&#39;length&#39;]&amp;gt;0) {
            // 记录缓存队列
            $this-&amp;gt;queue($name);
        }
        return $result;
    }

    /**
     * 删除缓存
     * @access public
     * @param string $name 缓存变量名
     * @return boolen
     */
    public function rm($name) {
        return $this-&amp;gt;handler-&amp;gt;delete($this-&amp;gt;options[&#39;prefix&#39;].$name);
    }

    /**
     * 清除缓存
     * @access public
     * @return boolen
     */
    public function clear() {
        return $this-&amp;gt;handler-&amp;gt;flushDB();
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3、BAE Cache驱动及配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;#配置
#BAE API Key与Secret Key，前面已经有配置
&#39;BAE_AK&#39; 	=&amp;gt; &#39;XXX&#39;,
&#39;BAE_SK&#39;	=&amp;gt; &#39;XXX&#39;,

#设置自己的CacheID（资源名称）、Host和Port
&#39;DATA_CACHE_TYPE&#39; 	=&amp;gt; &#39;Bae&#39;,		//设为默认
&#39;DATA_CACHE_ID&#39;		=&amp;gt;	&#39;XXX&#39;,
&#39;MEMCACHE_HOST&#39;		=&amp;gt;	&#39;cache.duapp.com&#39;,
&#39;MEMCACHE_PORT&#39;		=&amp;gt;	000,


#require_once(BAE_API_ROOT_PATH . &#39;BaeMemcache.class.php&#39;);
#需要BAE相关的驱动文件，可以在index.php入口中添加Root Path方便使用，也可以自己修改定义
define(&#39;BAE_API_ROOT_PATH&#39;, &#39;你的BAE驱动文件路径&#39;);

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;//CacheBae.class.php
&amp;lt;?php
class CacheBae extends Cache {

    static $_cache;
    private $_handler;
   
    /**
     +----------------------------------------------------------
     * 架构函数
     +----------------------------------------------------------
     * @access public
     +----------------------------------------------------------
     */
    public function __construct($options=&#39;&#39;) {
        if(!empty($options)) {
            $this-&amp;gt;options =  $options;
        }
        $this-&amp;gt;options[&#39;expire&#39;] = isset($options[&#39;expire&#39;])?$options[&#39;expire&#39;]:C(&#39;DATA_CACHE_TIME&#39;);
        $this-&amp;gt;options[&#39;length&#39;]  =  isset($options[&#39;length&#39;])?$options[&#39;length&#39;]:0;
        $this-&amp;gt;options[&#39;queque&#39;]  =  &#39;bae&#39;;
        $this-&amp;gt;init();
    }

    /**
     +----------------------------------------------------------
     * 初始化检查
     +----------------------------------------------------------
     * @access private
     +----------------------------------------------------------
     * @return boolen
     +----------------------------------------------------------
     */
    private function init() {
    	require_once(BAE_API_ROOT_PATH . &#39;BaeMemcache.class.php&#39;);
    	/*Cache配置信息，可查询Cache详情页*/
    	$cacheid = C(&#39;DATA_CACHE_ID&#39;);
    	$host = C(&#39;MEMCACHE_HOST&#39;);
    	$port = C(&#39;MEMCACHE_PORT&#39;);
    	$user = C(&#39;BAE_AK&#39;);
    	$pwd = C(&#39;BAE_SK&#39;);

		$this-&amp;gt;_handler = new BaeMemcache($cacheid,$host. &#39;: &#39;. $port, $user, $pwd);
		$this-&amp;gt;connected = true;
    }

    /**
     +----------------------------------------------------------
     * 是否连接
     +----------------------------------------------------------
     * @access public
     +----------------------------------------------------------
     * @return boolen
     +----------------------------------------------------------
     */
    private function isConnected() {
        return $this-&amp;gt;connected;
    }
    /**
     +----------------------------------------------------------
     * 读取缓存
     +----------------------------------------------------------
     * @access public
     +----------------------------------------------------------
     * @param string $name 缓存变量名
     +----------------------------------------------------------
     * @return mixed
     +----------------------------------------------------------
     */
    public function get($name) {
        N(&#39;cache_read&#39;,1);
	$content = $this-&amp;gt;_handler-&amp;gt;get($name);
	if(false !== $content ){
            if(C(&#39;DATA_CACHE_COMPRESS&#39;) &amp;amp;&amp;amp; function_exists(&#39;gzcompress&#39;)) {
		$content = substr($content,0,-1);  //remvoe \0 in the end
	    }
            if(C(&#39;DATA_CACHE_CHECK&#39;)) {//开启数据校验
                $check  =  substr($content,0, 32);
                $content   =  substr($content,32);
                if($check != md5($content)) {//校验错误
                    return false;
                }
            }
            if(C(&#39;DATA_CACHE_COMPRESS&#39;) &amp;amp;&amp;amp; function_exists(&#39;gzcompress&#39;)) {
                //启用数据压缩
                $content   =   gzuncompress($content);
            }
            $content    =   unserialize($content);
	    return $content;
        }
        else {
            return false;
        }
    }

    /**
     +----------------------------------------------------------
     * 写入缓存
     +----------------------------------------------------------
     * @access public
     +----------------------------------------------------------
     * @param string $name 缓存变量名
     * @param mixed $value  存储数据
     * @param int $expire  有效时间 0为永久
     +----------------------------------------------------------
     * @return boolen
     +----------------------------------------------------------
     */
    public function set($name,$value,$expire=null) {
        N(&#39;cache_write&#39;,1);
        if(is_null($expire)) {
            $expire =  $this-&amp;gt;options[&#39;expire&#39;];
        }
        $data   =   serialize($value);
        if( C(&#39;DATA_CACHE_COMPRESS&#39;) &amp;amp;&amp;amp; function_exists(&#39;gzcompress&#39;)) {
            //数据压缩
        //    $data   =   gzcompress($data,3);
	      $data =  gzencode($data) . &amp;quot;\0&amp;quot;;
        }
        if(C(&#39;DATA_CACHE_CHECK&#39;)) {//开启数据校验
            $check  =  md5($data);
        }else {
            $check  =  &#39;&#39;;
        }
	$data = $check.$data;
	$result =  $this-&amp;gt;_handler-&amp;gt;set($name,$data,0,intval($expire));
        if($result) {
            if($this-&amp;gt;options[&#39;length&#39;]&amp;gt;0) {
                // 记录缓存队列
                $this-&amp;gt;queue($name);
            }
	    return true;
        }else {
            return false;
        }
    }

    /**
     +----------------------------------------------------------
     * 删除缓存
     +----------------------------------------------------------
     * @access public
     +----------------------------------------------------------
     * @param string $name 缓存变量名
     +----------------------------------------------------------
     * @return boolen
     +----------------------------------------------------------
     */
    public function rm($name) {
        return $this-&amp;gt;_handler-&amp;gt;delete($name);
    }
    static function queueSet($name,$value)
    {
	$h = new BaeMemcache();
	if ( $h-&amp;gt;set($name,$value) ){
		self::$_cache = array($name =&amp;gt; $value);
	}
    }
    static function queueGet($name)
    {
	if(isset(self::$_cache[$name]))
		return self::$_cache[$name];
	$h = new BaeMemcache();
	$r = $h-&amp;gt;get($name);
	if ( false === $r ){
		return false;
	}
	self::$_cache[$name] = $r;
	return $r;
    }

}

&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>WAMP&#43;ThinkPHP配置</title>
      <link>http://hbchen.com/post/2014-03-05-wamppei-zhi/</link>
      <pubDate>Wed, 05 Mar 2014 18:30:00 +0800</pubDate>
      
      <guid>http://hbchen.com/post/2014-03-05-wamppei-zhi/</guid>
      
        <description>&lt;p&gt;配置ThinkPHP开发环境&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;开启Rewrite支持.htaccess&lt;/li&gt;
&lt;li&gt;自定义工程路径&lt;/li&gt;
&lt;li&gt;自定义本地域名访问&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;WAMP安装
&lt;a href=&#34;http://www.wampserver.com/en/#download-wrapper&#34;&gt;http://www.wampserver.com/en/#download-wrapper&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#编辑wamp/bin/apache/Apache2.x.x/conf/httpd.conf
#开启rewrite，支持.htaccess
#LoadModule rewrite_module modules/mod_rewrite.so去掉注释
LoadModule rewrite_module modules/mod_rewrite.so

#开启httpd-vhosts，自定义域名和工程路径
#Include conf/extra/httpd-vhosts.conf去掉注释
Include conf/extra/httpd-vhosts.conf

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自定义本地域名和工程路径&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#编辑wamp/bin/apache/Apache2.x.x/conf/extra/httpd-vhosts.conf
#自定义工程路径
#d:projectpath工程路径
#mylocalhost.com自定义域名
#注意AllowOverride 是All，与wamp主界面不同
#可以定义其他端口
&amp;lt;VirtualHost *:80&amp;gt;  
  DocumentRoot d:projectpath 
  ServerName myhost.com 
  &amp;lt;Directory &amp;quot;d:projectpath&amp;quot;&amp;gt; 
      Options Indexes FollowSymLinks 
      AllowOverride All 
      Order allow,deny 
      Allow from all 
  &amp;lt;/Directory&amp;gt; 
&amp;lt;/VirtualHost&amp;gt;

#添加wamp主界面，假设wamp安装在D盘
&amp;lt;VirtualHost *:80&amp;gt;  
  DocumentRoot d:wamp/www 
  ServerName wamp.com 
  &amp;lt;Directory &amp;quot;d:wamp/www&amp;quot;&amp;gt; 
      Options Indexes FollowSymLinks 
      AllowOverride None 
      Order allow,deny 
      Allow from all 
  &amp;lt;/Directory&amp;gt; 
&amp;lt;/VirtualHost&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;去掉URL中的index.php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#.htaccess
&amp;lt;IfModule mod_rewrite.c&amp;gt;
RewriteEngine on
RewriteCond %{SCRIPT_FILENAME} !-f
RewriteCond %{SCRIPT_FILENAME} !-d
RewriteRule ^(.*)$ index.php/$1 [QAS,PT,L]
&amp;lt;/IfModule&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#修改系统hosts
127.0.0.1 	myhost.com
127.0.0.1 	wamp.com

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重启Apache&lt;/p&gt;

&lt;p&gt;查看成果吧&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myhost.com
wamp.com
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>MySql:优化工具</title>
      <link>http://hbchen.com/post/2013-11-07-mysql-you-hua-gong-ju/</link>
      <pubDate>Thu, 07 Nov 2013 18:36:00 +0800</pubDate>
      
      <guid>http://hbchen.com/post/2013-11-07-mysql-you-hua-gong-ju/</guid>
      
        <description>&lt;p&gt;脚本优化tuning-primer.sh&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#cd /etc/   (my.conf所在目录)
#wget http://www.day32.com/MySQL/tuning-primer.sh
#chmod +x tuning-primer.sh
#./tuning-primer.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;优化工具Mysqltuner&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;安装：
#yum install -y mysqltuner
运行：
#mysqltuner
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>日志统计分析-Shell/Goaccess</title>
      <link>http://hbchen.com/post/2013-11-07-ri-zhi-tong-ji-fen-xi-shell-slash-goaccess/</link>
      <pubDate>Thu, 07 Nov 2013 18:36:00 +0800</pubDate>
      
      <guid>http://hbchen.com/post/2013-11-07-ri-zhi-tong-ji-fen-xi-shell-slash-goaccess/</guid>
      
        <description>&lt;p&gt;对Nginx或其他日志进行简单的统计分析&lt;/p&gt;

&lt;p&gt;Shell
对某一列进行统计，可以分析Status Code,URL等&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#cat access.log | awk &#39;{print $9}&#39;|sort|uniq -c | sort -r -n &amp;gt; stat.log
或
#cat access.log |grep &amp;quot;200&amp;quot; | awk &#39;{print $7}&#39;|sort|uniq -c | sort -r -n &amp;gt; stat.log
#vi stat.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定String统计&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#cat access.log|grep &amp;quot;200&amp;quot;|wc -l 
#cat access.log|grep &amp;quot;www.localhost.com&amp;quot;|wc -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Goaccess工具
&lt;a href=&#34;http://goaccess.io/&#34;&gt;http://goaccess.io/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#goaccess -f access.log
#goaccess -f access.log -a -s -b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Goaccess分析压缩日志&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#zcat access.log-20130123.gz | goaccess
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>SVN:使用</title>
      <link>http://hbchen.com/post/2013-11-07-svnshi-yong/</link>
      <pubDate>Thu, 07 Nov 2013 18:15:00 +0800</pubDate>
      
      <guid>http://hbchen.com/post/2013-11-07-svnshi-yong/</guid>
      
        <description>&lt;h4 id=&#34;1-系统&#34;&gt;1.系统&lt;/h4&gt;

&lt;p&gt;Centos 6.4&lt;/p&gt;

&lt;h4 id=&#34;2-安装svn&#34;&gt;2.安装svn&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#yum install subversion
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-建立版本库&#34;&gt;3.建立版本库&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#mkdir /mnt/svndata
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动服务&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#svnserve -d -r /mnt/svndata
#svnadmin create /mnt/svndata/svn
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-修改配置&#34;&gt;4.修改配置&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#cd /mnt/svndata/svn/conf
#vi svnserve.conf
anon-access=none
auth-access=write
password-db=passwd

#vi passwd
[users]
hobo=123456
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;5-实现svn与web同步&#34;&gt;5.实现SVN与WEB同步&lt;/h4&gt;

&lt;p&gt;1)checkout一个test项目&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#svn co svn://localhost/svn /mnt/www/webroot/test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2)修改权限为WEB用户&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#chown -R apache:apache /mnt/www/webroot/test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3)建立同步脚本&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#cd /mnt/svndata/svn/hooks/
#cp post-commit.tmpl post-commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4)编辑post-commit，添加同步脚本&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#vi post-commit
export LANG=en_US.UTF-8
SVN=/usr/bin/svn
WEB_TEST=/mnt/www/webroot/test
$SVN update $WEB_TEST –username hobo –password 123456
chown -R apache:apache $WEB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5)增加脚本执行权限&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#chmod +x post-commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mac下Versions中.a包无法上传问题&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd filepath
svn add libMobClickLibrary.a 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;删除版本控制 / 删除多级.svn文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#find . -type d -name &amp;quot;.svn&amp;quot;|xargs rm -rf;
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>MySQL:常用命令行</title>
      <link>http://hbchen.com/post/2013-10-30-mysql-chang-yong-ming-ling-xing/</link>
      <pubDate>Wed, 30 Oct 2013 08:58:00 +0800</pubDate>
      
      <guid>http://hbchen.com/post/2013-10-30-mysql-chang-yong-ming-ling-xing/</guid>
      
        <description>&lt;h4 id=&#34;登入&#34;&gt;登入&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;mysql -h192.168.1.110  -uroot -ppassword
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;登出&#34;&gt;登出&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;quit/exit
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;查看数据库&#34;&gt;查看数据库&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;show databases;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;用户权限&#34;&gt;用户权限&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#添加
grant select on db.table to &#39;user&#39;@&#39;host&#39;;
grant select,update on *.* to &#39;test&#39;@&#39;%&#39;;
#撤销
revoke all on *.* from &#39;test&#39;@&#39;%&#39;;
#查看
show grants;
show grants for user@localhost
 
#删除用户
delete from mysql.user where user=&#39;&#39; and host=&#39;&#39;;

#设置密码
update mysql.user set password=PASSWORD(&#39;123456&#39;) where user=&#39;root&#39;;
 
#配置远程连接
GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;password&#39; WITH GRANT OPTION; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;导出&#34;&gt;导出&lt;/h4&gt;

&lt;p&gt;mysqldump -u　用户名 -p 数据库名 &amp;gt; 数据库名.sql&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysqldump -u　root -p dbname &amp;gt; filepath.sql  
#To export tofile(data only)
mysqldump -u [user]-p[pass]--no-create-db --no-create-info mydb &amp;gt; mydb.sql
#To export tofile(structure only)
mysqldump -u [user]-p[pass]--no-data mydb &amp;gt; mydb.sql
#To import todatabase
mysql -u [user]-p[pass] mydb &amp;lt; mydb.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;导入&#34;&gt;导入&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; use dbname             #切到要导入的数据库
mysql&amp;gt; source filepath.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;变量查看-修改&#34;&gt;变量查看/修改&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;show variables like &#39;%slow%&#39;;
set global slow_query_log= &#39;ON&#39;;

show status like &#39;Qca%&#39;;
 
#查看SQL中select条数
show status like &#39;Com_sel%&#39;; #显示的是一次会话的值！
show global status like &amp;quot;Com_select&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;找回密码&#34;&gt;找回密码？&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;1、kill -TERM mysqld
2、conf中加入skip-grant-tables
3、service mysqld restart
4、mysql -uroot -p
5、修改密码
6、改回原配置并重启
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;binlog-http-dev-mysql-com-doc-refman-5-7-en-mysqlbinlog-html&#34;&gt;&lt;a href=&#34;http://dev.mysql.com/doc/refman/5.7/en/mysqlbinlog.html&#34;&gt;Binlog&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.mysql.com/doc/refman/5.7/en/purge-binary-logs.html&#34;&gt;删除mysql-bin日志&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PURGE BINARY LOGS TO &#39;mysql-bin.010&#39;;
PURGE BINARY LOGS BEFORE &#39;2008-04-02 22:46:26&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;清空表并使自增归0&#34;&gt;清空表并使自增归0&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;TRUNCATE TABLE tablename
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;mac无法登陆&#34;&gt;Mac无法登陆&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;Can&#39;t connect to MySQL server on &#39;127.0.0.1&#39; (61)
StevenMacBookAir:~ Hobo$ sudo su -
StevenMacBookAir:~ root# nohup /usr/local/mysql/bin/mysqld_safe &amp;amp;
[1] 464
StevenMacBookAir:~ root# appending output to nohup.out
exit
logout
StevenMacBookAir:~ Hobo$ 
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Go-Revel:Gorp连接MySQL</title>
      <link>http://hbchen.com/post/2013-08-24-go-revel-gorplian-jie-mysql/</link>
      <pubDate>Sat, 24 Aug 2013 09:22:00 +0800</pubDate>
      
      <guid>http://hbchen.com/post/2013-08-24-go-revel-gorplian-jie-mysql/</guid>
      
        <description>&lt;p&gt;Revel连接数据库可以参考官方的Booking示例&lt;/p&gt;

&lt;p&gt;除了Revel需要Gorp和MySQL驱动两个库&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#Gorp
go get github.com/coopernurse/gorp

#MySQL驱动
go get github.com/go-sql-driver/mysql  #也可以用其他的驱动库
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建一个新的Revel工程app_name&lt;/p&gt;

&lt;p&gt;配置conf/app.conf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# DB username:@tcp(yourhost:port)/dbname
db.import = github.com/Go-SQL-Driver/mysql
db.driver = mysql
db.spec   = root:@tcp(localhost:3306)/db_name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建models/user.go，先只定义几个测试字段&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package models

type User struct {
	UserId							int
	Name               	string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建controllers/init.go&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package controllers

import &amp;quot;github.com/robfig/revel&amp;quot;

func init() {
	revel.OnAppStart(Init)
	revel.InterceptMethod((*GorpController).Begin, revel.BEFORE)
	revel.InterceptMethod((*GorpController).Commit, revel.AFTER)
	revel.InterceptMethod((*GorpController).Rollback, revel.FINALLY)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建controllers/gorp.go&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package controllers

import (
	&amp;quot;database/sql&amp;quot;
	&amp;quot;github.com/coopernurse/gorp&amp;quot;
	_ &amp;quot;github.com/Go-SQL-Driver/mysql&amp;quot;
	r &amp;quot;github.com/robfig/revel&amp;quot;
	&amp;quot;github.com/robfig/revel/modules/db/app&amp;quot;
	&amp;quot;app_name/app/models&amp;quot;
)

var (
	Dbm *gorp.DbMap
)

func Init() {
	db.Init()
	//MySQL InnoDB UTF8
	Dbm = &amp;amp;gorp.DbMap{Db: db.Db, Dialect: gorp.MySQLDialect{&amp;quot;InnoDB&amp;quot;, &amp;quot;UTF8&amp;quot;}}

	setColumnSizes := func(t *gorp.TableMap, colSizes map[string]int) {
		for col, size := range colSizes {
			t.ColMap(col).MaxSize = size
		}
	}

	//创建一个User测试表
	t := Dbm.AddTable(models.User{}).SetKeys(true, &amp;quot;UserId&amp;quot;)
	setColumnSizes(t, map[string]int{
		&amp;quot;Name&amp;quot;: 20,
	})

	Dbm.TraceOn(&amp;quot;[gorp]&amp;quot;, r.INFO)
	Dbm.CreateTables()

	//插入一组测试数据
	demoUser := &amp;amp;models.User{0, &amp;quot;Hobo&amp;quot;}
	if err := Dbm.Insert(demoUser); err != nil {
		panic(err)
	}

}

type GorpController struct {
	*r.Controller
	Txn *gorp.Transaction
}

func (c *GorpController) Begin() r.Result {
	txn, err := Dbm.Begin()
	if err != nil {
		panic(err)
	}
	c.Txn = txn
	return nil
}

func (c *GorpController) Commit() r.Result {
	if c.Txn == nil {
		return nil
	}
	if err := c.Txn.Commit(); err != nil &amp;amp;&amp;amp; err != sql.ErrTxDone {
		panic(err)
	}
	c.Txn = nil
	return nil
}

func (c *GorpController) Rollback() r.Result {
	if c.Txn == nil {
		return nil
	}
	if err := c.Txn.Rollback(); err != nil &amp;amp;&amp;amp; err != sql.ErrTxDone {
		panic(err)
	}
	c.Txn = nil
	return nil
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改controllers/app.go&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;#import添加
&amp;quot;app_name/app/models&amp;quot;

#包含GorpController
type App struct {
	GorpController
}

#测试查询
func (c App) Index() revel.Result {
	greeting := &amp;quot;It works!&amp;quot;

	users, err := c.Txn.Select(models.User{}, `select * from user where Name=&amp;quot;Hobo&amp;quot;`)
	if len(users) == 0 {
		greeting = &amp;quot;Null&amp;quot;
	} else {
		user := users[0].(*models.User)
		greeting = user.Name
	}
	if err != nil {
		panic(err)
	}
	return c.Render(greeting)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改views/App/Index.html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#&amp;lt;h1&amp;gt;It works&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;/{/{.greeting/}/}&amp;lt;/h1&amp;gt;		#去掉反斜杠
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行测试下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go run app_name
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Go-Revel:开发环境</title>
      <link>http://hbchen.com/post/2013-08-20-go-revel-kai-fa-huan-jing/</link>
      <pubDate>Tue, 20 Aug 2013 16:38:00 +0800</pubDate>
      
      <guid>http://hbchen.com/post/2013-08-20-go-revel-kai-fa-huan-jing/</guid>
      
        <description>&lt;p&gt;环境安装都直接看官方文档最靠谱，经他人加工后的经常容易误导，后面也会有一些安装体会分享&lt;/p&gt;

&lt;p&gt;Go&lt;br&gt;
英文&lt;a href=&#34;http://golang.org/doc/install#osx&#34;&gt;http://golang.org/doc/install#osx&lt;/a&gt; （墙）&lt;br&gt;
中文&lt;a href=&#34;http://zh.golanger.com/doc/install#osx&#34;&gt;http://zh.golanger.com/doc/install#osx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Revel&lt;br&gt;
&lt;a href=&#34;http://robfig.github.io/revel/tutorial/gettingstarted.html&#34;&gt;http://robfig.github.io/revel/tutorial/gettingstarted.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Revel配置过程中GOPATH和Revel command的配置可以直接编辑.bash_profile，个人感觉这样更简单直接&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#编辑.bash_profile
$ vi ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#添加两行
export GOPATH=gocode_path 			#gocode_path自己的工作目录
export PATH=$PATH:$GOPATH/bin		#PATH可能原来也有其他的配置，继续追加就行，&amp;quot;:&amp;quot;分割

#编辑完成，重启终端
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;开发工具我还是喜欢Sublime Text 2，LiteIDE也试过，感觉一般&lt;br&gt;
&lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;http://www.sublimetext.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;再推荐个Mac小工具Go2Shell，安装后添加到Finder的工具栏上，直接在当前目录下启动终端，没用过的同学可以装下，很方便&lt;br&gt;
&lt;a href=&#34;https://itunes.apple.com/cn/app/go2shell/id445770608?mt=12&#34;&gt;https://itunes.apple.com/cn/app/go2shell/id445770608?mt=12&lt;/a&gt;&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>