<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bae on Jane - A super concise theme for Hugo</title>
    <link>http://localhost:1313/categories/bae/</link>
    <description>Recent content in Bae on Jane - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 06 Mar 2014 19:00:00 +0800</lastBuildDate>
    
        <atom:link href="http://localhost:1313/categories/bae/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>BAE Cache&amp;Redis实现ThinkPHP的Cache驱动</title>
      <link>http://localhost:1313/archives/2014-03-06-bae-redisshi-xian-thinkphpcache/</link>
      <pubDate>Thu, 06 Mar 2014 19:00:00 +0800</pubDate>
      
      <guid>http://localhost:1313/archives/2014-03-06-bae-redisshi-xian-thinkphpcache/</guid>
      
        <description>&lt;p&gt;在BAE环境下有单独的Cache，同时也有Redis，可以同时用来做不同的Cache服务，先从Redis开始&lt;/p&gt;

&lt;p&gt;1、Redis相关配置
{% codeblock conf.php lang:ruby %}
#BAE API Key与Secret Key
&amp;lsquo;BAE_AK&amp;rsquo;    =&amp;gt; &amp;lsquo;XXX&amp;rsquo;,
&amp;lsquo;BAE_SK&amp;rsquo;    =&amp;gt; &amp;lsquo;XXX&amp;rsquo;,&lt;/p&gt;

&lt;p&gt;#BAE Redis扩展配置
&amp;lsquo;BAE_REDIS_HOST&amp;rsquo;   =&amp;gt;   &amp;lsquo;redis.duapp.com&amp;rsquo;,
&amp;lsquo;BAE_REDIS_PORT&amp;rsquo;   =&amp;gt;   80,
&amp;lsquo;BAE_REDIS_DBNAME&amp;rsquo; =&amp;gt;   &amp;lsquo;XXX&amp;rsquo;,&lt;/p&gt;

&lt;p&gt;{% endcodeblock %}&lt;/p&gt;

&lt;p&gt;可以选择将Redis是否设为默认缓存，如果不是，使用时注意切换
{% codeblock 使用切换 lang:ruby %}
$cache = Cache::getInstance(&amp;lsquo;Baeredis&amp;rsquo;,array());
{% endcodeblock %}&lt;/p&gt;

&lt;p&gt;2、Redis Cache 驱动&lt;/p&gt;

&lt;p&gt;
{% codeblock CacheBaeredis.class.php lang:ruby %}
#根据CacheRedis.class.php修改&lt;/p&gt;

&lt;p&gt;&amp;lt;?php&lt;/p&gt;

&lt;p&gt;defined(&amp;lsquo;THINK_PATH&amp;rsquo;) or exit();&lt;/p&gt;

&lt;p&gt;class CacheBaeredis extends Cache {
     /**
     * 架构函数
     * @param array $options 缓存参数
     * @access public
     */
    public function __construct($options=array()) {
        if ( !extension_loaded(&amp;lsquo;redis&amp;rsquo;) ) {
            throw_exception(L(&amp;rsquo;_NOT&lt;em&gt;SUPPERT&lt;/em&gt;&amp;rsquo;).&amp;rsquo;:redis&amp;rsquo;);
        }
        if(empty($options)) {
            $options = array (
                &amp;lsquo;host&amp;rsquo;          =&amp;gt; C(&amp;lsquo;BAE_REDIS_HOST&amp;rsquo;) ? C(&amp;lsquo;BAE_REDIS_HOST&amp;rsquo;) : &amp;lsquo;127.0.0.1&amp;rsquo;,
                &amp;lsquo;port&amp;rsquo;          =&amp;gt; C(&amp;lsquo;BAE_REDIS_PORT&amp;rsquo;) ? C(&amp;lsquo;BAE_REDIS_PORT&amp;rsquo;) : 80,
                &amp;lsquo;timeout&amp;rsquo;       =&amp;gt; C(&amp;lsquo;DATA_CACHE_TIMEOUT&amp;rsquo;) ? C(&amp;lsquo;DATA_CACHE_TIMEOUT&amp;rsquo;) : false,
                &amp;lsquo;persistent&amp;rsquo;    =&amp;gt; false,
            );
        }
        $this-&amp;gt;options =  $options;
        $this-&amp;gt;options[&amp;lsquo;expire&amp;rsquo;] =  isset($options[&amp;lsquo;expire&amp;rsquo;])?  $options[&amp;lsquo;expire&amp;rsquo;]  :   C(&amp;lsquo;DATA_CACHE_TIME&amp;rsquo;);
        $this-&amp;gt;options[&amp;lsquo;prefix&amp;rsquo;] =  isset($options[&amp;lsquo;prefix&amp;rsquo;])?  $options[&amp;lsquo;prefix&amp;rsquo;]  :   C(&amp;lsquo;DATA_CACHE_PREFIX&amp;rsquo;);&lt;br /&gt;
        $this-&amp;gt;options[&amp;lsquo;length&amp;rsquo;] =  isset($options[&amp;lsquo;length&amp;rsquo;])?  $options[&amp;lsquo;length&amp;rsquo;]  :   0;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    try {
        /*建立连接后，在进行集合操作前，需要先进行auth验证*/
        $this-&amp;gt;handler = new Redis();
        $ret;
        if ($options[&#39;timeout&#39;] === false) {
            $ret = $this-&amp;gt;handler-&amp;gt;connect($options[&#39;host&#39;], $options[&#39;port&#39;]);
        }
        else {
            $ret = $this-&amp;gt;handler-&amp;gt;connect($options[&#39;host&#39;], $options[&#39;port&#39;], $options[&#39;timeout&#39;]);
        }

        if ($ret === false) {
            throw new RedisException($this-&amp;gt;handler-&amp;gt;getLastError());
        }

        $user = C(&#39;BAE_AK&#39;);
        $pwd = C(&#39;BAE_SK&#39;);
        $dbname = C(&#39;BAE_REDIS_DBNAME&#39;);

        $ret = $this-&amp;gt;handler-&amp;gt;auth($user . &amp;quot;-&amp;quot; . $pwd . &amp;quot;-&amp;quot; . $dbname);
        if ($ret === false) {
            throw new RedisException($this-&amp;gt;handler-&amp;gt;getLastError());
        }

    } catch (RedisException $e) {
        throw_exception(&#39;BAE Redis:&#39;.$e-&amp;gt;getMessage());
    }


}

/**
 * 读取缓存
 * @access public
 * @param string $name 缓存变量名
 * @return mixed
 */
public function get($name) {
    N(&#39;cache_read&#39;,1);
    $value = $this-&amp;gt;handler-&amp;gt;get($this-&amp;gt;options[&#39;prefix&#39;].$name);
    $jsonData  = json_decode( $value, true );
    return ($jsonData === NULL) ? $value : $jsonData;   //检测是否为JSON数据 true 返回JSON解析数组, false返回源数据
}

/**
 * 写入缓存
 * @access public
 * @param string $name 缓存变量名
 * @param mixed $value  存储数据
 * @param integer $expire  有效时间（秒）
 * @return boolen
 */
public function set($name, $value, $expire = null) {
    N(&#39;cache_write&#39;,1);
    if(is_null($expire)) {
        $expire  =  $this-&amp;gt;options[&#39;expire&#39;];
    }
    $name   =   $this-&amp;gt;options[&#39;prefix&#39;].$name;
    //对数组/对象数据进行缓存处理，保证数据完整性
    $value  =  (is_object($value) || is_array($value)) ? json_encode($value) : $value;

    //相对CacheRedis的驱动增加了expire&amp;gt;0的判断
    if(is_int($expire) &amp;amp; $expire &amp;gt; 0) {
        $result = $this-&amp;gt;handler-&amp;gt;setex($name, $expire, $value);
    }else{
        $result = $this-&amp;gt;handler-&amp;gt;set($name, $value);
    }
    if($result &amp;amp;&amp;amp; $this-&amp;gt;options[&#39;length&#39;]&amp;gt;0) {
        // 记录缓存队列
        $this-&amp;gt;queue($name);
    }
    return $result;
}

/**
 * 删除缓存
 * @access public
 * @param string $name 缓存变量名
 * @return boolen
 */
public function rm($name) {
    return $this-&amp;gt;handler-&amp;gt;delete($this-&amp;gt;options[&#39;prefix&#39;].$name);
}

/**
 * 清除缓存
 * @access public
 * @return boolen
 */
public function clear() {
    return $this-&amp;gt;handler-&amp;gt;flushDB();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
{% endcodeblock %}&lt;/p&gt;

&lt;p&gt;3、BAE Cache驱动及配置&lt;/p&gt;

&lt;p&gt;{% codeblock 配置 lang:ruby %}&lt;/p&gt;

&lt;p&gt;#BAE API Key与Secret Key，前面已经有配置
&amp;lsquo;BAE_AK&amp;rsquo;    =&amp;gt; &amp;lsquo;XXX&amp;rsquo;,
&amp;lsquo;BAE_SK&amp;rsquo;    =&amp;gt; &amp;lsquo;XXX&amp;rsquo;,&lt;/p&gt;

&lt;p&gt;#设置自己的CacheID（资源名称）、Host和Port
&amp;lsquo;DATA_CACHE_TYPE&amp;rsquo;   =&amp;gt; &amp;lsquo;Bae&amp;rsquo;,       //设为默认
&amp;lsquo;DATA_CACHE_ID&amp;rsquo;     =&amp;gt;  &amp;lsquo;XXX&amp;rsquo;,
&amp;lsquo;MEMCACHE_HOST&amp;rsquo;     =&amp;gt;  &amp;lsquo;cache.duapp.com&amp;rsquo;,
&amp;lsquo;MEMCACHE_PORT&amp;rsquo;     =&amp;gt;  000,&lt;/p&gt;

&lt;p&gt;#require_once(BAE_API_ROOT_PATH . &amp;lsquo;BaeMemcache.class.php&amp;rsquo;);
#需要BAE相关的驱动文件，可以在index.php入口中添加Root Path方便使用，也可以自己修改定义
define(&amp;lsquo;BAE_API_ROOT_PATH&amp;rsquo;, &amp;lsquo;你的BAE驱动文件路径&amp;rsquo;);&lt;/p&gt;

&lt;p&gt;{% endcodeblock %}&lt;/p&gt;

&lt;p&gt;{% codeblock CacheBae.class.php lang:ruby %}&lt;/p&gt;

&lt;p&gt;&amp;lt;?php
class CacheBae extends Cache {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static $_cache;
private $_handler;

/**
 +----------------------------------------------------------
 * 架构函数
 +----------------------------------------------------------
 * @access public
 +----------------------------------------------------------
 */
public function __construct($options=&#39;&#39;) {
    if(!empty($options)) {
        $this-&amp;gt;options =  $options;
    }
    $this-&amp;gt;options[&#39;expire&#39;] = isset($options[&#39;expire&#39;])?$options[&#39;expire&#39;]:C(&#39;DATA_CACHE_TIME&#39;);
    $this-&amp;gt;options[&#39;length&#39;]  =  isset($options[&#39;length&#39;])?$options[&#39;length&#39;]:0;
    $this-&amp;gt;options[&#39;queque&#39;]  =  &#39;bae&#39;;
    $this-&amp;gt;init();
}

/**
 +----------------------------------------------------------
 * 初始化检查
 +----------------------------------------------------------
 * @access private
 +----------------------------------------------------------
 * @return boolen
 +----------------------------------------------------------
 */
private function init() {
    require_once(BAE_API_ROOT_PATH . &#39;BaeMemcache.class.php&#39;);
    /*Cache配置信息，可查询Cache详情页*/
    $cacheid = C(&#39;DATA_CACHE_ID&#39;);
    $host = C(&#39;MEMCACHE_HOST&#39;);
    $port = C(&#39;MEMCACHE_PORT&#39;);
    $user = C(&#39;BAE_AK&#39;);
    $pwd = C(&#39;BAE_SK&#39;);

    $this-&amp;gt;_handler = new BaeMemcache($cacheid,$host. &#39;: &#39;. $port, $user, $pwd);
    $this-&amp;gt;connected = true;
}

/**
 +----------------------------------------------------------
 * 是否连接
 +----------------------------------------------------------
 * @access public
 +----------------------------------------------------------
 * @return boolen
 +----------------------------------------------------------
 */
private function isConnected() {
    return $this-&amp;gt;connected;
}
/**
 +----------------------------------------------------------
 * 读取缓存
 +----------------------------------------------------------
 * @access public
 +----------------------------------------------------------
 * @param string $name 缓存变量名
 +----------------------------------------------------------
 * @return mixed
 +----------------------------------------------------------
 */
public function get($name) {
    N(&#39;cache_read&#39;,1);
$content = $this-&amp;gt;_handler-&amp;gt;get($name);
if(false !== $content ){
        if(C(&#39;DATA_CACHE_COMPRESS&#39;) &amp;amp;&amp;amp; function_exists(&#39;gzcompress&#39;)) {
    $content = substr($content,0,-1);  //remvoe \0 in the end
    }
        if(C(&#39;DATA_CACHE_CHECK&#39;)) {//开启数据校验
            $check  =  substr($content,0, 32);
            $content   =  substr($content,32);
            if($check != md5($content)) {//校验错误
                return false;
            }
        }
        if(C(&#39;DATA_CACHE_COMPRESS&#39;) &amp;amp;&amp;amp; function_exists(&#39;gzcompress&#39;)) {
            //启用数据压缩
            $content   =   gzuncompress($content);
        }
        $content    =   unserialize($content);
    return $content;
    }
    else {
        return false;
    }
}

/**
 +----------------------------------------------------------
 * 写入缓存
 +----------------------------------------------------------
 * @access public
 +----------------------------------------------------------
 * @param string $name 缓存变量名
 * @param mixed $value  存储数据
 * @param int $expire  有效时间 0为永久
 +----------------------------------------------------------
 * @return boolen
 +----------------------------------------------------------
 */
public function set($name,$value,$expire=null) {
    N(&#39;cache_write&#39;,1);
    if(is_null($expire)) {
        $expire =  $this-&amp;gt;options[&#39;expire&#39;];
    }
    $data   =   serialize($value);
    if( C(&#39;DATA_CACHE_COMPRESS&#39;) &amp;amp;&amp;amp; function_exists(&#39;gzcompress&#39;)) {
        //数据压缩
    //    $data   =   gzcompress($data,3);
      $data =  gzencode($data) . &amp;quot;\0&amp;quot;;
    }
    if(C(&#39;DATA_CACHE_CHECK&#39;)) {//开启数据校验
        $check  =  md5($data);
    }else {
        $check  =  &#39;&#39;;
    }
$data = $check.$data;
$result =  $this-&amp;gt;_handler-&amp;gt;set($name,$data,0,intval($expire));
    if($result) {
        if($this-&amp;gt;options[&#39;length&#39;]&amp;gt;0) {
            // 记录缓存队列
            $this-&amp;gt;queue($name);
        }
    return true;
    }else {
        return false;
    }
}

/**
 +----------------------------------------------------------
 * 删除缓存
 +----------------------------------------------------------
 * @access public
 +----------------------------------------------------------
 * @param string $name 缓存变量名
 +----------------------------------------------------------
 * @return boolen
 +----------------------------------------------------------
 */
public function rm($name) {
    return $this-&amp;gt;_handler-&amp;gt;delete($name);
}
static function queueSet($name,$value)
{
$h = new BaeMemcache();
if ( $h-&amp;gt;set($name,$value) ){
    self::$_cache = array($name =&amp;gt; $value);
}
}
static function queueGet($name)
{
if(isset(self::$_cache[$name]))
    return self::$_cache[$name];
$h = new BaeMemcache();
$r = $h-&amp;gt;get($name);
if ( false === $r ){
    return false;
}
self::$_cache[$name] = $r;
return $r;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;{% endcodeblock %}&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>