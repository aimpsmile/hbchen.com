<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bae on Hobo&#39;s Blog - 在路上~永不停止的脚步</title>
    <link>http://hbchen.com/tags/bae/</link>
    <description>Recent content in Bae on Hobo&#39;s Blog - 在路上~永不停止的脚步</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>HB Studio</copyright>
    <lastBuildDate>Thu, 06 Mar 2014 19:00:00 +0800</lastBuildDate>
    
        <atom:link href="http://hbchen.com/tags/bae/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>BAE Cache&amp;Redis实现ThinkPHP的Cache驱动</title>
      <link>http://hbchen.com/post/2014-03-06-bae-redisshi-xian-thinkphpcache/</link>
      <pubDate>Thu, 06 Mar 2014 19:00:00 +0800</pubDate>
      
      <guid>http://hbchen.com/post/2014-03-06-bae-redisshi-xian-thinkphpcache/</guid>
      
        <description>&lt;p&gt;在BAE环境下有单独的Cache，同时也有Redis，可以同时用来做不同的Cache服务，先从Redis开始&lt;/p&gt;

&lt;p&gt;1、Redis相关配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;//conf.php
#BAE API Key与Secret Key
&#39;BAE_AK&#39; 	=&amp;gt; &#39;XXX&#39;,
&#39;BAE_SK&#39;	=&amp;gt; &#39;XXX&#39;,

#BAE Redis扩展配置
&#39;BAE_REDIS_HOST&#39;   =&amp;gt;	&#39;redis.duapp.com&#39;,
&#39;BAE_REDIS_PORT&#39;   =&amp;gt;	80,
&#39;BAE_REDIS_DBNAME&#39; =&amp;gt;	&#39;XXX&#39;,

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;可以选择将Redis是否设为默认缓存，如果不是，使用时注意切换&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$cache = Cache::getInstance(&#39;Baeredis&#39;,array());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2、Redis Cache 驱动&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;//CacheBaeredis.class.php
#根据CacheRedis.class.php修改

&amp;lt;?php

defined(&#39;THINK_PATH&#39;) or exit();


class CacheBaeredis extends Cache {
	 /**
	 * 架构函数
     * @param array $options 缓存参数
     * @access public
     */
    public function __construct($options=array()) {
        if ( !extension_loaded(&#39;redis&#39;) ) {
            throw_exception(L(&#39;_NOT_SUPPERT_&#39;).&#39;:redis&#39;);
        }
        if(empty($options)) {
            $options = array (
                &#39;host&#39;          =&amp;gt; C(&#39;BAE_REDIS_HOST&#39;) ? C(&#39;BAE_REDIS_HOST&#39;) : &#39;127.0.0.1&#39;,
                &#39;port&#39;          =&amp;gt; C(&#39;BAE_REDIS_PORT&#39;) ? C(&#39;BAE_REDIS_PORT&#39;) : 80,
                &#39;timeout&#39;       =&amp;gt; C(&#39;DATA_CACHE_TIMEOUT&#39;) ? C(&#39;DATA_CACHE_TIMEOUT&#39;) : false,
                &#39;persistent&#39;    =&amp;gt; false,
            );
        }
        $this-&amp;gt;options =  $options;
        $this-&amp;gt;options[&#39;expire&#39;] =  isset($options[&#39;expire&#39;])?  $options[&#39;expire&#39;]  :   C(&#39;DATA_CACHE_TIME&#39;);
        $this-&amp;gt;options[&#39;prefix&#39;] =  isset($options[&#39;prefix&#39;])?  $options[&#39;prefix&#39;]  :   C(&#39;DATA_CACHE_PREFIX&#39;);        
        $this-&amp;gt;options[&#39;length&#39;] =  isset($options[&#39;length&#39;])?  $options[&#39;length&#39;]  :   0;        
            
        try {
            /*建立连接后，在进行集合操作前，需要先进行auth验证*/
            $this-&amp;gt;handler = new Redis();
            $ret;
            if ($options[&#39;timeout&#39;] === false) {
                $ret = $this-&amp;gt;handler-&amp;gt;connect($options[&#39;host&#39;], $options[&#39;port&#39;]);
            }
            else {
                $ret = $this-&amp;gt;handler-&amp;gt;connect($options[&#39;host&#39;], $options[&#39;port&#39;], $options[&#39;timeout&#39;]);
            }

            if ($ret === false) {
                throw new RedisException($this-&amp;gt;handler-&amp;gt;getLastError());
            }

            $user = C(&#39;BAE_AK&#39;);
            $pwd = C(&#39;BAE_SK&#39;);
            $dbname = C(&#39;BAE_REDIS_DBNAME&#39;);

            $ret = $this-&amp;gt;handler-&amp;gt;auth($user . &amp;quot;-&amp;quot; . $pwd . &amp;quot;-&amp;quot; . $dbname);
            if ($ret === false) {
                throw new RedisException($this-&amp;gt;handler-&amp;gt;getLastError());
            }
         
        } catch (RedisException $e) {
            throw_exception(&#39;BAE Redis:&#39;.$e-&amp;gt;getMessage());
        }


    }

    /**
     * 读取缓存
     * @access public
     * @param string $name 缓存变量名
     * @return mixed
     */
    public function get($name) {
        N(&#39;cache_read&#39;,1);
        $value = $this-&amp;gt;handler-&amp;gt;get($this-&amp;gt;options[&#39;prefix&#39;].$name);
        $jsonData  = json_decode( $value, true );
        return ($jsonData === NULL) ? $value : $jsonData;	//检测是否为JSON数据 true 返回JSON解析数组, false返回源数据
    }

    /**
     * 写入缓存
     * @access public
     * @param string $name 缓存变量名
     * @param mixed $value  存储数据
     * @param integer $expire  有效时间（秒）
     * @return boolen
     */
    public function set($name, $value, $expire = null) {
        N(&#39;cache_write&#39;,1);
        if(is_null($expire)) {
            $expire  =  $this-&amp;gt;options[&#39;expire&#39;];
        }
        $name   =   $this-&amp;gt;options[&#39;prefix&#39;].$name;
        //对数组/对象数据进行缓存处理，保证数据完整性
        $value  =  (is_object($value) || is_array($value)) ? json_encode($value) : $value;

        //相对CacheRedis的驱动增加了expire&amp;gt;0的判断
        if(is_int($expire) &amp;amp; $expire &amp;gt; 0) {
            $result = $this-&amp;gt;handler-&amp;gt;setex($name, $expire, $value);
        }else{
            $result = $this-&amp;gt;handler-&amp;gt;set($name, $value);
        }
        if($result &amp;amp;&amp;amp; $this-&amp;gt;options[&#39;length&#39;]&amp;gt;0) {
            // 记录缓存队列
            $this-&amp;gt;queue($name);
        }
        return $result;
    }

    /**
     * 删除缓存
     * @access public
     * @param string $name 缓存变量名
     * @return boolen
     */
    public function rm($name) {
        return $this-&amp;gt;handler-&amp;gt;delete($this-&amp;gt;options[&#39;prefix&#39;].$name);
    }

    /**
     * 清除缓存
     * @access public
     * @return boolen
     */
    public function clear() {
        return $this-&amp;gt;handler-&amp;gt;flushDB();
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3、BAE Cache驱动及配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;#配置
#BAE API Key与Secret Key，前面已经有配置
&#39;BAE_AK&#39; 	=&amp;gt; &#39;XXX&#39;,
&#39;BAE_SK&#39;	=&amp;gt; &#39;XXX&#39;,

#设置自己的CacheID（资源名称）、Host和Port
&#39;DATA_CACHE_TYPE&#39; 	=&amp;gt; &#39;Bae&#39;,		//设为默认
&#39;DATA_CACHE_ID&#39;		=&amp;gt;	&#39;XXX&#39;,
&#39;MEMCACHE_HOST&#39;		=&amp;gt;	&#39;cache.duapp.com&#39;,
&#39;MEMCACHE_PORT&#39;		=&amp;gt;	000,


#require_once(BAE_API_ROOT_PATH . &#39;BaeMemcache.class.php&#39;);
#需要BAE相关的驱动文件，可以在index.php入口中添加Root Path方便使用，也可以自己修改定义
define(&#39;BAE_API_ROOT_PATH&#39;, &#39;你的BAE驱动文件路径&#39;);

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;//CacheBae.class.php
&amp;lt;?php
class CacheBae extends Cache {

    static $_cache;
    private $_handler;
   
    /**
     +----------------------------------------------------------
     * 架构函数
     +----------------------------------------------------------
     * @access public
     +----------------------------------------------------------
     */
    public function __construct($options=&#39;&#39;) {
        if(!empty($options)) {
            $this-&amp;gt;options =  $options;
        }
        $this-&amp;gt;options[&#39;expire&#39;] = isset($options[&#39;expire&#39;])?$options[&#39;expire&#39;]:C(&#39;DATA_CACHE_TIME&#39;);
        $this-&amp;gt;options[&#39;length&#39;]  =  isset($options[&#39;length&#39;])?$options[&#39;length&#39;]:0;
        $this-&amp;gt;options[&#39;queque&#39;]  =  &#39;bae&#39;;
        $this-&amp;gt;init();
    }

    /**
     +----------------------------------------------------------
     * 初始化检查
     +----------------------------------------------------------
     * @access private
     +----------------------------------------------------------
     * @return boolen
     +----------------------------------------------------------
     */
    private function init() {
    	require_once(BAE_API_ROOT_PATH . &#39;BaeMemcache.class.php&#39;);
    	/*Cache配置信息，可查询Cache详情页*/
    	$cacheid = C(&#39;DATA_CACHE_ID&#39;);
    	$host = C(&#39;MEMCACHE_HOST&#39;);
    	$port = C(&#39;MEMCACHE_PORT&#39;);
    	$user = C(&#39;BAE_AK&#39;);
    	$pwd = C(&#39;BAE_SK&#39;);

		$this-&amp;gt;_handler = new BaeMemcache($cacheid,$host. &#39;: &#39;. $port, $user, $pwd);
		$this-&amp;gt;connected = true;
    }

    /**
     +----------------------------------------------------------
     * 是否连接
     +----------------------------------------------------------
     * @access public
     +----------------------------------------------------------
     * @return boolen
     +----------------------------------------------------------
     */
    private function isConnected() {
        return $this-&amp;gt;connected;
    }
    /**
     +----------------------------------------------------------
     * 读取缓存
     +----------------------------------------------------------
     * @access public
     +----------------------------------------------------------
     * @param string $name 缓存变量名
     +----------------------------------------------------------
     * @return mixed
     +----------------------------------------------------------
     */
    public function get($name) {
        N(&#39;cache_read&#39;,1);
	$content = $this-&amp;gt;_handler-&amp;gt;get($name);
	if(false !== $content ){
            if(C(&#39;DATA_CACHE_COMPRESS&#39;) &amp;amp;&amp;amp; function_exists(&#39;gzcompress&#39;)) {
		$content = substr($content,0,-1);  //remvoe \0 in the end
	    }
            if(C(&#39;DATA_CACHE_CHECK&#39;)) {//开启数据校验
                $check  =  substr($content,0, 32);
                $content   =  substr($content,32);
                if($check != md5($content)) {//校验错误
                    return false;
                }
            }
            if(C(&#39;DATA_CACHE_COMPRESS&#39;) &amp;amp;&amp;amp; function_exists(&#39;gzcompress&#39;)) {
                //启用数据压缩
                $content   =   gzuncompress($content);
            }
            $content    =   unserialize($content);
	    return $content;
        }
        else {
            return false;
        }
    }

    /**
     +----------------------------------------------------------
     * 写入缓存
     +----------------------------------------------------------
     * @access public
     +----------------------------------------------------------
     * @param string $name 缓存变量名
     * @param mixed $value  存储数据
     * @param int $expire  有效时间 0为永久
     +----------------------------------------------------------
     * @return boolen
     +----------------------------------------------------------
     */
    public function set($name,$value,$expire=null) {
        N(&#39;cache_write&#39;,1);
        if(is_null($expire)) {
            $expire =  $this-&amp;gt;options[&#39;expire&#39;];
        }
        $data   =   serialize($value);
        if( C(&#39;DATA_CACHE_COMPRESS&#39;) &amp;amp;&amp;amp; function_exists(&#39;gzcompress&#39;)) {
            //数据压缩
        //    $data   =   gzcompress($data,3);
	      $data =  gzencode($data) . &amp;quot;\0&amp;quot;;
        }
        if(C(&#39;DATA_CACHE_CHECK&#39;)) {//开启数据校验
            $check  =  md5($data);
        }else {
            $check  =  &#39;&#39;;
        }
	$data = $check.$data;
	$result =  $this-&amp;gt;_handler-&amp;gt;set($name,$data,0,intval($expire));
        if($result) {
            if($this-&amp;gt;options[&#39;length&#39;]&amp;gt;0) {
                // 记录缓存队列
                $this-&amp;gt;queue($name);
            }
	    return true;
        }else {
            return false;
        }
    }

    /**
     +----------------------------------------------------------
     * 删除缓存
     +----------------------------------------------------------
     * @access public
     +----------------------------------------------------------
     * @param string $name 缓存变量名
     +----------------------------------------------------------
     * @return boolen
     +----------------------------------------------------------
     */
    public function rm($name) {
        return $this-&amp;gt;_handler-&amp;gt;delete($name);
    }
    static function queueSet($name,$value)
    {
	$h = new BaeMemcache();
	if ( $h-&amp;gt;set($name,$value) ){
		self::$_cache = array($name =&amp;gt; $value);
	}
    }
    static function queueGet($name)
    {
	if(isset(self::$_cache[$name]))
		return self::$_cache[$name];
	$h = new BaeMemcache();
	$r = $h-&amp;gt;get($name);
	if ( false === $r ){
		return false;
	}
	self::$_cache[$name] = $r;
	return $r;
    }

}

&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
  </channel>
</rss>